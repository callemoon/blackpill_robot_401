
blackpill_robot_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000244c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  080027b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c0  200001e4  08002998  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002a4  08002998  000202a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000da89  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020e6  00000000  00000000  0002dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067c8  00000000  00000000  0002fd83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009a8  00000000  00000000  00036550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c80  00000000  00000000  00036ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004a5d  00000000  00000000  00037b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ce4  00000000  00000000  0003c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000402b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002390  00000000  00000000  00040338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080025d4 	.word	0x080025d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	080025d4 	.word	0x080025d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f896 	bl	80006e8 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000010 	.word	0x20000010
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 f8c8 	bl	80017a4 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000210 	.word	0x20000210
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000210 	.word	0x20000210

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000714:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000718:	2b02      	cmp	r3, #2
 800071a:	d003      	beq.n	8000724 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000720:	2001      	movs	r0, #1
 8000722:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000724:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000726:	2305      	movs	r3, #5
 8000728:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000734:	2000      	movs	r0, #0
}
 8000736:	4770      	bx	lr

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800073c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000740:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80008d0 <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000744:	4a60      	ldr	r2, [pc, #384]	; (80008c8 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000748:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800074c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000750:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000754:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000756:	42ac      	cmp	r4, r5
 8000758:	f040 80a6 	bne.w	80008a8 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075c:	684c      	ldr	r4, [r1, #4]
 800075e:	f024 0c10 	bic.w	ip, r4, #16
 8000762:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000766:	2e01      	cmp	r6, #1
 8000768:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800076c:	d812      	bhi.n	8000794 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800076e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000770:	2603      	movs	r6, #3
 8000772:	fa06 f60e 	lsl.w	r6, r6, lr
 8000776:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800077a:	68ce      	ldr	r6, [r1, #12]
 800077c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000780:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000782:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000784:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000786:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800078a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800078e:	409e      	lsls	r6, r3
 8000790:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000792:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000794:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000796:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000798:	fa06 f60e 	lsl.w	r6, r6, lr
 800079c:	43f6      	mvns	r6, r6
 800079e:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007a2:	688f      	ldr	r7, [r1, #8]
 80007a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80007a8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ac:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80007b0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	d116      	bne.n	80007e2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 80007b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007c0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007c8:	f04f 0c0f 	mov.w	ip, #15
 80007cc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007d0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007d4:	690f      	ldr	r7, [r1, #16]
 80007d6:	fa07 f70b 	lsl.w	r7, r7, fp
 80007da:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007de:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007e2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e6:	f004 0703 	and.w	r7, r4, #3
 80007ea:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007ee:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007f2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f4:	00e6      	lsls	r6, r4, #3
 80007f6:	d557      	bpl.n	80008a8 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f8:	f04f 0b00 	mov.w	fp, #0
 80007fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8000800:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000804:	4e31      	ldr	r6, [pc, #196]	; (80008cc <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800080a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800080e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000812:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000816:	9703      	str	r7, [sp, #12]
 8000818:	9f03      	ldr	r7, [sp, #12]
 800081a:	f023 0703 	bic.w	r7, r3, #3
 800081e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000822:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000826:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800082a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000832:	f04f 0e0f 	mov.w	lr, #15
 8000836:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000840:	d039      	beq.n	80008b6 <HAL_GPIO_Init+0x17e>
 8000842:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000846:	42b0      	cmp	r0, r6
 8000848:	d037      	beq.n	80008ba <HAL_GPIO_Init+0x182>
 800084a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084e:	42b0      	cmp	r0, r6
 8000850:	d035      	beq.n	80008be <HAL_GPIO_Init+0x186>
 8000852:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000856:	42b0      	cmp	r0, r6
 8000858:	d033      	beq.n	80008c2 <HAL_GPIO_Init+0x18a>
 800085a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800085e:	42b0      	cmp	r0, r6
 8000860:	bf14      	ite	ne
 8000862:	2607      	movne	r6, #7
 8000864:	2604      	moveq	r6, #4
 8000866:	fa06 f60c 	lsl.w	r6, r6, ip
 800086a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800086e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000870:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000872:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000874:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000878:	bf0c      	ite	eq
 800087a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800087c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800087e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000880:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000882:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000886:	bf0c      	ite	eq
 8000888:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800088a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800088c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800088e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000890:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000898:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800089a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800089c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800089e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf54      	ite	pl
 80008a2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008a4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008a6:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a8:	3301      	adds	r3, #1
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	f47f af4f 	bne.w	800074e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008b0:	b005      	add	sp, #20
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b6:	465e      	mov	r6, fp
 80008b8:	e7d5      	b.n	8000866 <HAL_GPIO_Init+0x12e>
 80008ba:	2601      	movs	r6, #1
 80008bc:	e7d3      	b.n	8000866 <HAL_GPIO_Init+0x12e>
 80008be:	2602      	movs	r6, #2
 80008c0:	e7d1      	b.n	8000866 <HAL_GPIO_Init+0x12e>
 80008c2:	2603      	movs	r6, #3
 80008c4:	e7cf      	b.n	8000866 <HAL_GPIO_Init+0x12e>
 80008c6:	bf00      	nop
 80008c8:	40013c00 	.word	0x40013c00
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d8:	4604      	mov	r4, r0
 80008da:	b908      	cbnz	r0, 80008e0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	e03f      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e0:	6803      	ldr	r3, [r0, #0]
 80008e2:	07dd      	lsls	r5, r3, #31
 80008e4:	d410      	bmi.n	8000908 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	0798      	lsls	r0, r3, #30
 80008ea:	d45a      	bmi.n	80009a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	071a      	lsls	r2, r3, #28
 80008f0:	f100 809c 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	075b      	lsls	r3, r3, #29
 80008f8:	f100 80ba 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fc:	69a0      	ldr	r0, [r4, #24]
 80008fe:	2800      	cmp	r0, #0
 8000900:	f040 811b 	bne.w	8000b3a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000904:	2000      	movs	r0, #0
 8000906:	e02b      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000908:	4ba4      	ldr	r3, [pc, #656]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	f002 020c 	and.w	r2, r2, #12
 8000910:	2a04      	cmp	r2, #4
 8000912:	d007      	beq.n	8000924 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800091a:	2a08      	cmp	r2, #8
 800091c:	d10a      	bne.n	8000934 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	0259      	lsls	r1, r3, #9
 8000922:	d507      	bpl.n	8000934 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000924:	4b9d      	ldr	r3, [pc, #628]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	039a      	lsls	r2, r3, #14
 800092a:	d5dc      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1d9      	bne.n	80008e6 <HAL_RCC_OscConfig+0x12>
 8000932:	e7d3      	b.n	80008dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	4d99      	ldr	r5, [pc, #612]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800093c:	d113      	bne.n	8000966 <HAL_RCC_OscConfig+0x92>
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000944:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000946:	f7ff fe75 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	4d94      	ldr	r5, [pc, #592]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800094c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	039b      	lsls	r3, r3, #14
 8000952:	d4c8      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fe6e 	bl	8000634 <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	2864      	cmp	r0, #100	; 0x64
 800095c:	d9f7      	bls.n	800094e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
}
 8000960:	b002      	add	sp, #8
 8000962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000966:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096a:	d104      	bne.n	8000976 <HAL_RCC_OscConfig+0xa2>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	e7e3      	b.n	800093e <HAL_RCC_OscConfig+0x6a>
 8000976:	682a      	ldr	r2, [r5, #0]
 8000978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	682a      	ldr	r2, [r5, #0]
 8000980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000984:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1dd      	bne.n	8000946 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	039f      	lsls	r7, r3, #14
 8000994:	d5a7      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fe4d 	bl	8000634 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xbc>
 80009a0:	e7dd      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a2:	4b7e      	ldr	r3, [pc, #504]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f012 0f0c 	tst.w	r2, #12
 80009aa:	d007      	beq.n	80009bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b2:	2a08      	cmp	r2, #8
 80009b4:	d111      	bne.n	80009da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	025e      	lsls	r6, r3, #9
 80009ba:	d40e      	bmi.n	80009da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009bc:	4b77      	ldr	r3, [pc, #476]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	0795      	lsls	r5, r2, #30
 80009c2:	d502      	bpl.n	80009ca <HAL_RCC_OscConfig+0xf6>
 80009c4:	68e2      	ldr	r2, [r4, #12]
 80009c6:	2a01      	cmp	r2, #1
 80009c8:	d188      	bne.n	80008dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	6921      	ldr	r1, [r4, #16]
 80009ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d8:	e788      	b.n	80008ec <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009da:	68e2      	ldr	r2, [r4, #12]
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <HAL_RCC_OscConfig+0x2cc>)
 80009de:	b1b2      	cbz	r2, 8000a0e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e4:	f7ff fe26 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e8:	4d6c      	ldr	r5, [pc, #432]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	0798      	lsls	r0, r3, #30
 80009f0:	d507      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f2:	682b      	ldr	r3, [r5, #0]
 80009f4:	6922      	ldr	r2, [r4, #16]
 80009f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009fe:	602b      	str	r3, [r5, #0]
 8000a00:	e774      	b.n	80008ec <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a02:	f7ff fe17 	bl	8000634 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d9ef      	bls.n	80009ec <HAL_RCC_OscConfig+0x118>
 8000a0c:	e7a7      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe10 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a14:	4d61      	ldr	r5, [pc, #388]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	f57f af66 	bpl.w	80008ec <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a20:	f7ff fe08 	bl	8000634 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x144>
 8000a2a:	e798      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a2c:	6962      	ldr	r2, [r4, #20]
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <HAL_RCC_OscConfig+0x2d0>)
 8000a30:	b17a      	cbz	r2, 8000a52 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a36:	f7ff fdfd 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3a:	4d58      	ldr	r5, [pc, #352]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a3c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a40:	079f      	lsls	r7, r3, #30
 8000a42:	f53f af57 	bmi.w	80008f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a46:	f7ff fdf5 	bl	8000634 <HAL_GetTick>
 8000a4a:	1b80      	subs	r0, r0, r6
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9f6      	bls.n	8000a3e <HAL_RCC_OscConfig+0x16a>
 8000a50:	e785      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a54:	f7ff fdee 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a58:	4d50      	ldr	r5, [pc, #320]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f57f af48 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fde6 	bl	8000634 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x188>
 8000a6e:	e776      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a78:	d128      	bne.n	8000acc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	9201      	str	r2, [sp, #4]
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a8e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	4d45      	ldr	r5, [pc, #276]	; (8000ba8 <HAL_RCC_OscConfig+0x2d4>)
 8000a92:	682b      	ldr	r3, [r5, #0]
 8000a94:	05d9      	lsls	r1, r3, #23
 8000a96:	d51b      	bpl.n	8000ad0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a98:	68a3      	ldr	r3, [r4, #8]
 8000a9a:	4d40      	ldr	r5, [pc, #256]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d127      	bne.n	8000af0 <HAL_RCC_OscConfig+0x21c>
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aa8:	f7ff fdc4 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aac:	4d3b      	ldr	r5, [pc, #236]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000aae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab6:	079b      	lsls	r3, r3, #30
 8000ab8:	d539      	bpl.n	8000b2e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	f43f af1e 	beq.w	80008fc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac0:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	e717      	b.n	80008fc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000acc:	2600      	movs	r6, #0
 8000ace:	e7df      	b.n	8000a90 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fdac 	bl	8000634 <HAL_GetTick>
 8000adc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ade:	682b      	ldr	r3, [r5, #0]
 8000ae0:	05da      	lsls	r2, r3, #23
 8000ae2:	d4d9      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae4:	f7ff fda6 	bl	8000634 <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9f7      	bls.n	8000ade <HAL_RCC_OscConfig+0x20a>
 8000aee:	e736      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d104      	bne.n	8000afe <HAL_RCC_OscConfig+0x22a>
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	672b      	str	r3, [r5, #112]	; 0x70
 8000afc:	e7d0      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1cc>
 8000afe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	672a      	str	r2, [r5, #112]	; 0x70
 8000b06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b08:	f022 0204 	bic.w	r2, r2, #4
 8000b0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1ca      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b12:	f7ff fd8f 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d5cb      	bpl.n	8000aba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f7ff fd87 	bl	8000634 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	4540      	cmp	r0, r8
 8000b2a:	d9f7      	bls.n	8000b1c <HAL_RCC_OscConfig+0x248>
 8000b2c:	e717      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd81 	bl	8000634 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4540      	cmp	r0, r8
 8000b36:	d9bd      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x1e0>
 8000b38:	e711      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3a:	4d18      	ldr	r5, [pc, #96]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
 8000b3c:	68ab      	ldr	r3, [r5, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d047      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x302>
 8000b46:	4e19      	ldr	r6, [pc, #100]	; (8000bac <HAL_RCC_OscConfig+0x2d8>)
 8000b48:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b4c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b4e:	d135      	bne.n	8000bbc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b50:	f7ff fd70 	bl	8000634 <HAL_GetTick>
 8000b54:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	0199      	lsls	r1, r3, #6
 8000b5a:	d429      	bmi.n	8000bb0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b5c:	6a22      	ldr	r2, [r4, #32]
 8000b5e:	69e3      	ldr	r3, [r4, #28]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b64:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b72:	0852      	lsrs	r2, r2, #1
 8000b74:	3a01      	subs	r2, #1
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fd58 	bl	8000634 <HAL_GetTick>
 8000b84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	019a      	lsls	r2, r3, #6
 8000b8a:	f53f aebb 	bmi.w	8000904 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fd51 	bl	8000634 <HAL_GetTick>
 8000b92:	1b40      	subs	r0, r0, r5
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x2b2>
 8000b98:	e6e1      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	42470000 	.word	0x42470000
 8000ba4:	42470e80 	.word	0x42470e80
 8000ba8:	40007000 	.word	0x40007000
 8000bac:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb0:	f7ff fd40 	bl	8000634 <HAL_GetTick>
 8000bb4:	1bc0      	subs	r0, r0, r7
 8000bb6:	2802      	cmp	r0, #2
 8000bb8:	d9cd      	bls.n	8000b56 <HAL_RCC_OscConfig+0x282>
 8000bba:	e6d0      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fd3a 	bl	8000634 <HAL_GetTick>
 8000bc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	f57f ae9d 	bpl.w	8000904 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bca:	f7ff fd33 	bl	8000634 <HAL_GetTick>
 8000bce:	1b00      	subs	r0, r0, r4
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x2ee>
 8000bd4:	e6c3      	b.n	800095e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bd6:	2801      	cmp	r0, #1
 8000bd8:	f43f aec2 	beq.w	8000960 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000bdc:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bde:	69e3      	ldr	r3, [r4, #28]
 8000be0:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f47f ae79 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
 8000bea:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bec:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	f47f ae73 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000bfc:	4003      	ands	r3, r0
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	f47f ae6c 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c06:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f47f ae66 	bne.w	80008dc <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c12:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c16:	1ac0      	subs	r0, r0, r3
 8000c18:	bf18      	it	ne
 8000c1a:	2001      	movne	r0, #1
 8000c1c:	e6a0      	b.n	8000960 <HAL_RCC_OscConfig+0x8c>
 8000c1e:	bf00      	nop

08000c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c20:	4913      	ldr	r1, [pc, #76]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c24:	688b      	ldr	r3, [r1, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d003      	beq.n	8000c36 <HAL_RCC_GetSysClockFreq+0x16>
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d003      	beq.n	8000c3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c44:	bf14      	ite	ne
 8000c46:	480c      	ldrne	r0, [pc, #48]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c48:	480a      	ldreq	r0, [pc, #40]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c4e:	bf18      	it	ne
 8000c50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c56:	fba1 0100 	umull	r0, r1, r1, r0
 8000c5a:	f7ff fb19 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c66:	3301      	adds	r3, #1
 8000c68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c6e:	bd08      	pop	{r3, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	00f42400 	.word	0x00f42400
 8000c78:	017d7840 	.word	0x017d7840

08000c7c <HAL_RCC_ClockConfig>:
{
 8000c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c82:	4604      	mov	r4, r0
 8000c84:	b910      	cbnz	r0, 8000c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
 8000c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <HAL_RCC_ClockConfig+0x124>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	f002 020f 	and.w	r2, r2, #15
 8000c94:	428a      	cmp	r2, r1
 8000c96:	d329      	bcc.n	8000cec <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c98:	6821      	ldr	r1, [r4, #0]
 8000c9a:	078f      	lsls	r7, r1, #30
 8000c9c:	d42e      	bmi.n	8000cfc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c9e:	07c8      	lsls	r0, r1, #31
 8000ca0:	d441      	bmi.n	8000d26 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <HAL_RCC_ClockConfig+0x124>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	f002 020f 	and.w	r2, r2, #15
 8000caa:	4295      	cmp	r5, r2
 8000cac:	d367      	bcc.n	8000d7e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cae:	6822      	ldr	r2, [r4, #0]
 8000cb0:	0751      	lsls	r1, r2, #29
 8000cb2:	d46d      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb4:	0713      	lsls	r3, r2, #28
 8000cb6:	d507      	bpl.n	8000cc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000cba:	6921      	ldr	r1, [r4, #16]
 8000cbc:	6893      	ldr	r3, [r2, #8]
 8000cbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc8:	f7ff ffaa 	bl	8000c20 <HAL_RCC_GetSysClockFreq>
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000cce:	4a36      	ldr	r2, [pc, #216]	; (8000da8 <HAL_RCC_ClockConfig+0x12c>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	40d8      	lsrs	r0, r3
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <HAL_RCC_ClockConfig+0x130>)
 8000cdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_RCC_ClockConfig+0x134>)
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	f7ff fc5d 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d1c5      	bne.n	8000c86 <HAL_RCC_ClockConfig+0xa>
 8000cfa:	e7cd      	b.n	8000c98 <HAL_RCC_ClockConfig+0x1c>
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfe:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d02:	bf1e      	ittt	ne
 8000d04:	689a      	ldrne	r2, [r3, #8]
 8000d06:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d0a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d0e:	bf42      	ittt	mi
 8000d10:	689a      	ldrmi	r2, [r3, #8]
 8000d12:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d16:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	68a0      	ldr	r0, [r4, #8]
 8000d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d20:	4302      	orrs	r2, r0
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	e7bb      	b.n	8000c9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	6862      	ldr	r2, [r4, #4]
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d11d      	bne.n	8000d6a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	d0a7      	beq.n	8000c86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d36:	4e1b      	ldr	r6, [pc, #108]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d38:	68b3      	ldr	r3, [r6, #8]
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d42:	f7ff fc77 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d46:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4c:	68b3      	ldr	r3, [r6, #8]
 8000d4e:	6862      	ldr	r2, [r4, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d58:	d0a3      	beq.n	8000ca2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5a:	f7ff fc6b 	bl	8000634 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	4540      	cmp	r0, r8
 8000d62:	d9f3      	bls.n	8000d4c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d64:	2003      	movs	r0, #3
}
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d6a:	1e91      	subs	r1, r2, #2
 8000d6c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d70:	d802      	bhi.n	8000d78 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d76:	e7dd      	b.n	8000d34 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	f013 0f02 	tst.w	r3, #2
 8000d7c:	e7da      	b.n	8000d34 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7e:	b2ea      	uxtb	r2, r5
 8000d80:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	429d      	cmp	r5, r3
 8000d8a:	f47f af7c 	bne.w	8000c86 <HAL_RCC_ClockConfig+0xa>
 8000d8e:	e78e      	b.n	8000cae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d90:	4904      	ldr	r1, [pc, #16]	; (8000da4 <HAL_RCC_ClockConfig+0x128>)
 8000d92:	68e0      	ldr	r0, [r4, #12]
 8000d94:	688b      	ldr	r3, [r1, #8]
 8000d96:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	608b      	str	r3, [r1, #8]
 8000d9e:	e789      	b.n	8000cb4 <HAL_RCC_ClockConfig+0x38>
 8000da0:	40023c00 	.word	0x40023c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	080025fe 	.word	0x080025fe
 8000dac:	20000010 	.word	0x20000010
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dc2:	6810      	ldr	r0, [r2, #0]
}
 8000dc4:	40d8      	lsrs	r0, r3
 8000dc6:	4770      	bx	lr
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	0800260e 	.word	0x0800260e
 8000dd0:	20000010 	.word	0x20000010

08000dd4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000de2:	6810      	ldr	r0, [r2, #0]
}
 8000de4:	40d8      	lsrs	r0, r3
 8000de6:	4770      	bx	lr
 8000de8:	40023800 	.word	0x40023800
 8000dec:	0800260e 	.word	0x0800260e
 8000df0:	20000010 	.word	0x20000010

08000df4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000df4:	6a03      	ldr	r3, [r0, #32]
 8000df6:	f023 0301 	bic.w	r3, r3, #1
 8000dfa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dfc:	6a03      	ldr	r3, [r0, #32]
{
 8000dfe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e02:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e06:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e0a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e0c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e0e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e12:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e14:	4d0a      	ldr	r5, [pc, #40]	; (8000e40 <TIM_OC1_SetConfig+0x4c>)
 8000e16:	42a8      	cmp	r0, r5
 8000e18:	d10b      	bne.n	8000e32 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e1a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e1c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e1e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e22:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e24:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e26:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e2a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e2c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e30:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000e34:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e36:	684a      	ldr	r2, [r1, #4]
 8000e38:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e3a:	6203      	str	r3, [r0, #32]
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010000 	.word	0x40010000

08000e44 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e44:	6a03      	ldr	r3, [r0, #32]
 8000e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e4a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e4c:	6a03      	ldr	r3, [r0, #32]
{
 8000e4e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e52:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e56:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000e66:	4d0b      	ldr	r5, [pc, #44]	; (8000e94 <TIM_OC3_SetConfig+0x50>)
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	d10d      	bne.n	8000e88 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e6c:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e6e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e74:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e78:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e7a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e7e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e84:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e88:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e8a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e8c:	684a      	ldr	r2, [r1, #4]
 8000e8e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e90:	6203      	str	r3, [r0, #32]
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	40010000 	.word	0x40010000

08000e98 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e98:	6a03      	ldr	r3, [r0, #32]
 8000e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ea0:	6a03      	ldr	r3, [r0, #32]
{
 8000ea2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ea4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ea6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ea8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000eaa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000eae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000eb2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000eb8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ebc:	4d06      	ldr	r5, [pc, #24]	; (8000ed8 <TIM_OC4_SetConfig+0x40>)
 8000ebe:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000ec0:	bf02      	ittt	eq
 8000ec2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ec4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000ec8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ecc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ece:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ed0:	684a      	ldr	r2, [r1, #4]
 8000ed2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ed4:	6203      	str	r3, [r0, #32]
 8000ed6:	bd30      	pop	{r4, r5, pc}
 8000ed8:	40010000 	.word	0x40010000

08000edc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000edc:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000ede:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d00e      	beq.n	8000f02 <TIM_Base_SetConfig+0x26>
 8000ee4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ee8:	d00b      	beq.n	8000f02 <TIM_Base_SetConfig+0x26>
 8000eea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d007      	beq.n	8000f02 <TIM_Base_SetConfig+0x26>
 8000ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d003      	beq.n	8000f02 <TIM_Base_SetConfig+0x26>
 8000efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d115      	bne.n	8000f2e <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8000f02:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f08:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f0a:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <TIM_Base_SetConfig+0x94>)
 8000f0c:	4290      	cmp	r0, r2
 8000f0e:	d019      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f14:	d016      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d012      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d00e      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d00a      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f2e:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <TIM_Base_SetConfig+0x98>)
 8000f30:	4290      	cmp	r0, r2
 8000f32:	d007      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	d003      	beq.n	8000f44 <TIM_Base_SetConfig+0x68>
 8000f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d103      	bne.n	8000f4c <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f44:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f4a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f4c:	694a      	ldr	r2, [r1, #20]
 8000f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f52:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f56:	688b      	ldr	r3, [r1, #8]
 8000f58:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000f5a:	680b      	ldr	r3, [r1, #0]
 8000f5c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <TIM_Base_SetConfig+0x94>)
 8000f60:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000f62:	bf04      	itt	eq
 8000f64:	690b      	ldreq	r3, [r1, #16]
 8000f66:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	6143      	str	r3, [r0, #20]
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40010000 	.word	0x40010000
 8000f74:	40014000 	.word	0x40014000

08000f78 <HAL_TIM_PWM_Init>:
{
 8000f78:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	b1a0      	cbz	r0, 8000fa8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f86:	b91b      	cbnz	r3, 8000f90 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000f8c:	f000 fc26 	bl	80017dc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f96:	6820      	ldr	r0, [r4, #0]
 8000f98:	1d21      	adds	r1, r4, #4
 8000f9a:	f7ff ff9f 	bl	8000edc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
}
 8000faa:	bd10      	pop	{r4, pc}

08000fac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fac:	6a03      	ldr	r3, [r0, #32]
 8000fae:	f023 0310 	bic.w	r3, r3, #16
 8000fb2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000fb4:	6a03      	ldr	r3, [r0, #32]
{
 8000fb6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8000fb8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000fba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000fbe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fc2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fc6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000fc8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fcc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000fd0:	4d0b      	ldr	r5, [pc, #44]	; (8001000 <TIM_OC2_SetConfig+0x54>)
 8000fd2:	42a8      	cmp	r0, r5
 8000fd4:	d10d      	bne.n	8000ff2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fd6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fd8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000fe2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000fe4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fe8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000fee:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000ff2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000ff4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000ff6:	684a      	ldr	r2, [r1, #4]
 8000ff8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000ffa:	6203      	str	r3, [r0, #32]
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
 8000ffe:	bf00      	nop
 8001000:	40010000 	.word	0x40010000

08001004 <HAL_TIM_PWM_ConfigChannel>:
{
 8001004:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001006:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800100a:	2b01      	cmp	r3, #1
{
 800100c:	4604      	mov	r4, r0
 800100e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001012:	d025      	beq.n	8001060 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001014:	2301      	movs	r3, #1
 8001016:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800101a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800101e:	2a0c      	cmp	r2, #12
 8001020:	d818      	bhi.n	8001054 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001022:	e8df f002 	tbb	[pc, r2]
 8001026:	1707      	.short	0x1707
 8001028:	171e1717 	.word	0x171e1717
 800102c:	172f1717 	.word	0x172f1717
 8001030:	1717      	.short	0x1717
 8001032:	40          	.byte	0x40
 8001033:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001034:	6820      	ldr	r0, [r4, #0]
 8001036:	f7ff fedd 	bl	8000df4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800103a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800103c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	f042 0208 	orr.w	r2, r2, #8
 8001044:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001046:	699a      	ldr	r2, [r3, #24]
 8001048:	f022 0204 	bic.w	r2, r2, #4
 800104c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001052:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001054:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001056:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800105c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001060:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001062:	6820      	ldr	r0, [r4, #0]
 8001064:	f7ff ffa2 	bl	8000fac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001068:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800106a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800107a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001082:	e7e6      	b.n	8001052 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	f7ff fedd 	bl	8000e44 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800108a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800108c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800108e:	69da      	ldr	r2, [r3, #28]
 8001090:	f042 0208 	orr.w	r2, r2, #8
 8001094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	f022 0204 	bic.w	r2, r2, #4
 800109c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80010a2:	61da      	str	r2, [r3, #28]
      break;
 80010a4:	e7d6      	b.n	8001054 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80010a6:	6820      	ldr	r0, [r4, #0]
 80010a8:	f7ff fef6 	bl	8000e98 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80010ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010b0:	69da      	ldr	r2, [r3, #28]
 80010b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80010b8:	69da      	ldr	r2, [r3, #28]
 80010ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80010c0:	69da      	ldr	r2, [r3, #28]
 80010c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010c6:	e7ec      	b.n	80010a2 <HAL_TIM_PWM_ConfigChannel+0x9e>

080010c8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80010c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80010ca:	f001 011f 	and.w	r1, r1, #31
{
 80010ce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80010d0:	2401      	movs	r4, #1
 80010d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80010d4:	ea23 0304 	bic.w	r3, r3, r4
 80010d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80010da:	6a03      	ldr	r3, [r0, #32]
 80010dc:	408a      	lsls	r2, r1
 80010de:	431a      	orrs	r2, r3
 80010e0:	6202      	str	r2, [r0, #32]
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <HAL_TIM_PWM_Start>:
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80010e8:	2201      	movs	r2, #1
 80010ea:	6800      	ldr	r0, [r0, #0]
 80010ec:	f7ff ffec 	bl	80010c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_TIM_PWM_Start+0x34>)
 80010f4:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80010f6:	bf02      	ittt	eq
 80010f8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80010fa:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80010fe:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001106:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001108:	bf1e      	ittt	ne
 800110a:	681a      	ldrne	r2, [r3, #0]
 800110c:	f042 0201 	orrne.w	r2, r2, #1
 8001110:	601a      	strne	r2, [r3, #0]
}
 8001112:	2000      	movs	r0, #0
 8001114:	bd10      	pop	{r4, pc}
 8001116:	bf00      	nop
 8001118:	40010000 	.word	0x40010000

0800111c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800111c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001120:	2b01      	cmp	r3, #1
{
 8001122:	b530      	push	{r4, r5, lr}
 8001124:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001128:	d02d      	beq.n	8001186 <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800112a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800112e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001130:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8001132:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001134:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001138:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800113a:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 800113c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001140:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001142:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001144:	4c11      	ldr	r4, [pc, #68]	; (800118c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8001146:	42a3      	cmp	r3, r4
 8001148:	d012      	beq.n	8001170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800114a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114e:	d00f      	beq.n	8001170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001150:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8001154:	42a3      	cmp	r3, r4
 8001156:	d00b      	beq.n	8001170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001158:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800115c:	42a3      	cmp	r3, r4
 800115e:	d007      	beq.n	8001170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001160:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001164:	42a3      	cmp	r3, r4
 8001166:	d003      	beq.n	8001170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001168:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800116c:	42a3      	cmp	r3, r4
 800116e:	d104      	bne.n	800117a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001170:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001176:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800117a:	2301      	movs	r3, #1
 800117c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001180:	2300      	movs	r3, #0
 8001182:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001186:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001188:	bd30      	pop	{r4, r5, pc}
 800118a:	bf00      	nop
 800118c:	40010000 	.word	0x40010000

08001190 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001198:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011a2:	2320      	movs	r3, #32
 80011a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80011a8:	4770      	bx	lr
	...

080011ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011ac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011ae:	6803      	ldr	r3, [r0, #0]
 80011b0:	68c1      	ldr	r1, [r0, #12]
 80011b2:	691a      	ldr	r2, [r3, #16]
{
 80011b4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011ba:	430a      	orrs	r2, r1
 80011bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011be:	6925      	ldr	r5, [r4, #16]
 80011c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80011c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011c4:	69c0      	ldr	r0, [r0, #28]
 80011c6:	432a      	orrs	r2, r5
 80011c8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80011ca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80011d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80011d6:	430a      	orrs	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	69a1      	ldr	r1, [r4, #24]
 80011de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011e2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ec:	d129      	bne.n	8001242 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d003      	beq.n	80011fa <UART_SetConfig+0x4e>
 80011f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d120      	bne.n	800123c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80011fa:	f7ff fdeb 	bl	8000dd4 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80011fe:	6862      	ldr	r2, [r4, #4]
 8001200:	6825      	ldr	r5, [r4, #0]
 8001202:	1892      	adds	r2, r2, r2
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	f04f 0119 	mov.w	r1, #25
 800120c:	415b      	adcs	r3, r3
 800120e:	fba0 0101 	umull	r0, r1, r0, r1
 8001212:	f7ff f83d 	bl	8000290 <__aeabi_uldivmod>
 8001216:	2164      	movs	r1, #100	; 0x64
 8001218:	fbb0 f4f1 	udiv	r4, r0, r1
 800121c:	fb01 0314 	mls	r3, r1, r4, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	3332      	adds	r3, #50	; 0x32
 8001224:	fbb3 f3f1 	udiv	r3, r3, r1
 8001228:	f003 0207 	and.w	r2, r3, #7
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001232:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001236:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001238:	60ab      	str	r3, [r5, #8]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800123c:	f7ff fdba 	bl	8000db4 <HAL_RCC_GetPCLK1Freq>
 8001240:	e7dd      	b.n	80011fe <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001242:	4293      	cmp	r3, r2
 8001244:	d002      	beq.n	800124c <UART_SetConfig+0xa0>
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <UART_SetConfig+0xd8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d116      	bne.n	800127a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 800124c:	f7ff fdc2 	bl	8000dd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001250:	6863      	ldr	r3, [r4, #4]
 8001252:	6825      	ldr	r5, [r4, #0]
 8001254:	2119      	movs	r1, #25
 8001256:	009a      	lsls	r2, r3, #2
 8001258:	fba0 0101 	umull	r0, r1, r0, r1
 800125c:	0f9b      	lsrs	r3, r3, #30
 800125e:	f7ff f817 	bl	8000290 <__aeabi_uldivmod>
 8001262:	2264      	movs	r2, #100	; 0x64
 8001264:	fbb0 f1f2 	udiv	r1, r0, r2
 8001268:	fb02 0311 	mls	r3, r2, r1, r0
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	3332      	adds	r3, #50	; 0x32
 8001270:	fbb3 f3f2 	udiv	r3, r3, r2
 8001274:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001278:	e7de      	b.n	8001238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800127a:	f7ff fd9b 	bl	8000db4 <HAL_RCC_GetPCLK1Freq>
 800127e:	e7e7      	b.n	8001250 <UART_SetConfig+0xa4>
 8001280:	40011000 	.word	0x40011000
 8001284:	40011400 	.word	0x40011400

08001288 <HAL_UART_Init>:
{
 8001288:	b510      	push	{r4, lr}
  if (huart == NULL)
 800128a:	4604      	mov	r4, r0
 800128c:	b340      	cbz	r0, 80012e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800128e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001292:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001296:	b91b      	cbnz	r3, 80012a0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001298:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800129c:	f000 fae0 	bl	8001860 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012a2:	2324      	movs	r3, #36	; 0x24
 80012a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012a8:	68d3      	ldr	r3, [r2, #12]
 80012aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012ae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff ff7b 	bl	80011ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012c6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012ce:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80012d2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012da:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
}
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80012e4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80012e8:	2b20      	cmp	r3, #32
 80012ea:	d120      	bne.n	800132e <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80012ec:	b1e9      	cbz	r1, 800132a <HAL_UART_Receive_IT+0x46>
 80012ee:	b1e2      	cbz	r2, 800132a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80012f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d01a      	beq.n	800132e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80012f8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80012fa:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012fc:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80012fe:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001300:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001302:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001306:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001308:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800130a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800130c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001310:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001314:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001316:	6951      	ldr	r1, [r2, #20]
 8001318:	f041 0101 	orr.w	r1, r1, #1
 800131c:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800131e:	68d1      	ldr	r1, [r2, #12]
 8001320:	f041 0120 	orr.w	r1, r1, #32
 8001324:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001326:	4618      	mov	r0, r3
 8001328:	4770      	bx	lr
      return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
 800132c:	4770      	bx	lr
    return HAL_BUSY;
 800132e:	2002      	movs	r0, #2
}
 8001330:	4770      	bx	lr

08001332 <HAL_UART_TxCpltCallback>:
 8001332:	4770      	bx	lr

08001334 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001334:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001338:	2b22      	cmp	r3, #34	; 0x22
{
 800133a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800133c:	d136      	bne.n	80013ac <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800133e:	6883      	ldr	r3, [r0, #8]
 8001340:	6901      	ldr	r1, [r0, #16]
 8001342:	6802      	ldr	r2, [r0, #0]
 8001344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800134a:	d123      	bne.n	8001394 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800134c:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800134e:	b9e9      	cbnz	r1, 800138c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001354:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001358:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800135a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800135c:	3c01      	subs	r4, #1
 800135e:	b2a4      	uxth	r4, r4
 8001360:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001362:	b98c      	cbnz	r4, 8001388 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001364:	6803      	ldr	r3, [r0, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	f022 0220 	bic.w	r2, r2, #32
 800136c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800137e:	2320      	movs	r3, #32
 8001380:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001384:	f000 f8c0 	bl	8001508 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001388:	2000      	movs	r0, #0
}
 800138a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	f823 2b01 	strh.w	r2, [r3], #1
 8001392:	e7e1      	b.n	8001358 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001394:	b921      	cbnz	r1, 80013a0 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001396:	1c59      	adds	r1, r3, #1
 8001398:	6852      	ldr	r2, [r2, #4]
 800139a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e7dc      	b.n	800135a <UART_Receive_IT+0x26>
 80013a0:	6852      	ldr	r2, [r2, #4]
 80013a2:	1c59      	adds	r1, r3, #1
 80013a4:	6281      	str	r1, [r0, #40]	; 0x28
 80013a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013aa:	e7f7      	b.n	800139c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80013ac:	2002      	movs	r0, #2
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <HAL_UART_ErrorCallback>:
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80013b8:	68d9      	ldr	r1, [r3, #12]
{
 80013ba:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80013bc:	0716      	lsls	r6, r2, #28
{
 80013be:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80013c0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80013c2:	d107      	bne.n	80013d4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013c4:	0696      	lsls	r6, r2, #26
 80013c6:	d55c      	bpl.n	8001482 <HAL_UART_IRQHandler+0xce>
 80013c8:	068d      	lsls	r5, r1, #26
 80013ca:	d55a      	bpl.n	8001482 <HAL_UART_IRQHandler+0xce>
}
 80013cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80013d0:	f7ff bfb0 	b.w	8001334 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80013d4:	f015 0501 	ands.w	r5, r5, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_UART_IRQHandler+0x2c>
 80013da:	f411 7f90 	tst.w	r1, #288	; 0x120
 80013de:	d050      	beq.n	8001482 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80013e0:	07d0      	lsls	r0, r2, #31
 80013e2:	d505      	bpl.n	80013f0 <HAL_UART_IRQHandler+0x3c>
 80013e4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80013e6:	bf42      	ittt	mi
 80013e8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80013ea:	f043 0301 	orrmi.w	r3, r3, #1
 80013ee:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013f0:	0756      	lsls	r6, r2, #29
 80013f2:	d504      	bpl.n	80013fe <HAL_UART_IRQHandler+0x4a>
 80013f4:	b11d      	cbz	r5, 80013fe <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013fe:	0790      	lsls	r0, r2, #30
 8001400:	d504      	bpl.n	800140c <HAL_UART_IRQHandler+0x58>
 8001402:	b11d      	cbz	r5, 800140c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800140c:	0713      	lsls	r3, r2, #28
 800140e:	d506      	bpl.n	800141e <HAL_UART_IRQHandler+0x6a>
 8001410:	068e      	lsls	r6, r1, #26
 8001412:	d400      	bmi.n	8001416 <HAL_UART_IRQHandler+0x62>
 8001414:	b11d      	cbz	r5, 800141e <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001416:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800141e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001420:	2b00      	cmp	r3, #0
 8001422:	d066      	beq.n	80014f2 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001424:	0695      	lsls	r5, r2, #26
 8001426:	d504      	bpl.n	8001432 <HAL_UART_IRQHandler+0x7e>
 8001428:	0688      	lsls	r0, r1, #26
 800142a:	d502      	bpl.n	8001432 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ff81 	bl	8001334 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001436:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001438:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800143a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800143c:	d402      	bmi.n	8001444 <HAL_UART_IRQHandler+0x90>
 800143e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001442:	d01a      	beq.n	800147a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001444:	f7ff fea4 	bl	8001190 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	0652      	lsls	r2, r2, #25
 800144e:	d510      	bpl.n	8001472 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001450:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001452:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001458:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800145a:	b150      	cbz	r0, 8001472 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <HAL_UART_IRQHandler+0x140>)
 800145e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001460:	f7ff f958 	bl	8000714 <HAL_DMA_Abort_IT>
 8001464:	2800      	cmp	r0, #0
 8001466:	d044      	beq.n	80014f2 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001468:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800146a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800146e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001470:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff ff9c 	bl	80013b0 <HAL_UART_ErrorCallback>
 8001478:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800147a:	f7ff ff99 	bl	80013b0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001480:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001482:	0616      	lsls	r6, r2, #24
 8001484:	d527      	bpl.n	80014d6 <HAL_UART_IRQHandler+0x122>
 8001486:	060d      	lsls	r5, r1, #24
 8001488:	d525      	bpl.n	80014d6 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800148a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800148e:	2a21      	cmp	r2, #33	; 0x21
 8001490:	d12f      	bne.n	80014f2 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001492:	68a2      	ldr	r2, [r4, #8]
 8001494:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001498:	6a22      	ldr	r2, [r4, #32]
 800149a:	d117      	bne.n	80014cc <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800149c:	8811      	ldrh	r1, [r2, #0]
 800149e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80014a2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014a4:	6921      	ldr	r1, [r4, #16]
 80014a6:	b979      	cbnz	r1, 80014c8 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 80014a8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80014aa:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80014ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80014ae:	3a01      	subs	r2, #1
 80014b0:	b292      	uxth	r2, r2
 80014b2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80014b4:	b9ea      	cbnz	r2, 80014f2 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014bc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80014c8:	3201      	adds	r2, #1
 80014ca:	e7ee      	b.n	80014aa <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80014cc:	1c51      	adds	r1, r2, #1
 80014ce:	6221      	str	r1, [r4, #32]
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	e7ea      	b.n	80014ac <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80014d6:	0650      	lsls	r0, r2, #25
 80014d8:	d50b      	bpl.n	80014f2 <HAL_UART_IRQHandler+0x13e>
 80014da:	064a      	lsls	r2, r1, #25
 80014dc:	d509      	bpl.n	80014f2 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80014e6:	2320      	movs	r3, #32
 80014e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ff20 	bl	8001332 <HAL_UART_TxCpltCallback>
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
 80014f4:	080014f9 	.word	0x080014f9

080014f8 <UART_DMAAbortOnError>:
{
 80014f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001500:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001502:	f7ff ff55 	bl	80013b0 <HAL_UART_ErrorCallback>
 8001506:	bd08      	pop	{r3, pc}

08001508 <HAL_UART_RxCpltCallback>:

/*
 * Process incoming UART data from Bluetooth module (HM-10 BLE)
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001508:	b507      	push	{r0, r1, r2, lr}
	if (huart->Instance == USART1)
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_UART_RxCpltCallback+0x68>)
 800150c:	6802      	ldr	r2, [r0, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d112      	bne.n	8001538 <HAL_UART_RxCpltCallback+0x30>
	{
		if(uartSyncMode)
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_UART_RxCpltCallback+0x6c>)
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <HAL_UART_RxCpltCallback+0x70>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	b18a      	cbz	r2, 800153e <HAL_UART_RxCpltCallback+0x36>
		{
			// if detecting a \n character we have found a "frame" so start receiving frame by frame
			if(usartBuf[0] == '\n')
 800151a:	7802      	ldrb	r2, [r0, #0]
 800151c:	2a0a      	cmp	r2, #10
 800151e:	d106      	bne.n	800152e <HAL_UART_RxCpltCallback+0x26>
			{
				uartSyncMode = 0;
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
				//HAL_UART_Receive_DMA(&huart1, usartBuf, MSGLENGTH);
				HAL_UART_Receive_IT(&huart1, usartBuf, MSGLENGTH);
 8001524:	4601      	mov	r1, r0
 8001526:	220b      	movs	r2, #11
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <HAL_UART_RxCpltCallback+0x74>)
 800152a:	f7ff fedb 	bl	80012e4 <HAL_UART_Receive_IT>
			}

			HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 800152e:	2201      	movs	r2, #1
				joyValue2 = val2 >> 4;
			}

			/* Receive MSGLENGTH new bytes */
			//HAL_UART_Receive_DMA(&huart1, usartBuf, MSGLENGTH);
			HAL_UART_Receive_IT(&huart1, usartBuf, MSGLENGTH);
 8001530:	4911      	ldr	r1, [pc, #68]	; (8001578 <HAL_UART_RxCpltCallback+0x70>)
		else	// end of line char was not received, go to sync mode
		{
			uartSyncMode = 1;

			/* Receive one byte and try to synchronize */
			HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <HAL_UART_RxCpltCallback+0x74>)
 8001534:	f7ff fed6 	bl	80012e4 <HAL_UART_Receive_IT>
		}
	}
}
 8001538:	b003      	add	sp, #12
 800153a:	f85d fb04 	ldr.w	pc, [sp], #4
		if(usartBuf[MSGLENGTH-1] == '\n')	// process data
 800153e:	7a82      	ldrb	r2, [r0, #10]
 8001540:	2a0a      	cmp	r2, #10
 8001542:	d110      	bne.n	8001566 <HAL_UART_RxCpltCallback+0x5e>
			if(sscanf((char*)usartBuf, "%x %x", &val1, &val2) == 2)
 8001544:	ab01      	add	r3, sp, #4
 8001546:	466a      	mov	r2, sp
 8001548:	490d      	ldr	r1, [pc, #52]	; (8001580 <HAL_UART_RxCpltCallback+0x78>)
 800154a:	f000 fa5b 	bl	8001a04 <siscanf>
 800154e:	2802      	cmp	r0, #2
 8001550:	d107      	bne.n	8001562 <HAL_UART_RxCpltCallback+0x5a>
				joyValue1 = val1 >> 4;
 8001552:	9b00      	ldr	r3, [sp, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_UART_RxCpltCallback+0x7c>)
 8001556:	111b      	asrs	r3, r3, #4
 8001558:	6013      	str	r3, [r2, #0]
				joyValue2 = val2 >> 4;
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_UART_RxCpltCallback+0x80>)
 800155e:	111b      	asrs	r3, r3, #4
 8001560:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, usartBuf, MSGLENGTH);
 8001562:	220b      	movs	r2, #11
 8001564:	e7e4      	b.n	8001530 <HAL_UART_RxCpltCallback+0x28>
			uartSyncMode = 1;
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 800156a:	4601      	mov	r1, r0
 800156c:	e7e1      	b.n	8001532 <HAL_UART_RxCpltCallback+0x2a>
 800156e:	bf00      	nop
 8001570:	40011000 	.word	0x40011000
 8001574:	20000200 	.word	0x20000200
 8001578:	20000254 	.word	0x20000254
 800157c:	20000260 	.word	0x20000260
 8001580:	080025f8 	.word	0x080025f8
 8001584:	20000008 	.word	0x20000008
 8001588:	2000000c 	.word	0x2000000c

0800158c <MotorPWMControl>:
/*
 * Adjust the 4 PWM outputs that controls the motor driver
 */
void MotorPWMControl(uint16_t val1, uint16_t val2)
{
	if(val1 > (JOYSTICK_MIDVALUE + JOYSTICK_DEADZONE))
 800158c:	f640 0364 	movw	r3, #2148	; 0x864
 8001590:	4298      	cmp	r0, r3
{
 8001592:	b510      	push	{r4, lr}
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MotorPWMControl+0x6c>)
	if(val1 > (JOYSTICK_MIDVALUE + JOYSTICK_DEADZONE))
 8001596:	d912      	bls.n	80015be <MotorPWMControl+0x32>
	{
		uint16_t speed = val1 - JOYSTICK_MIDVALUE;

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2400      	movs	r4, #0
		uint16_t speed = val1 - JOYSTICK_MIDVALUE;
 800159c:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015a0:	6354      	str	r4, [r2, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, speed);
 80015a2:	b280      	uxth	r0, r0

		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015a4:	6390      	str	r0, [r2, #56]	; 0x38
		}

	if(val2 > (JOYSTICK_MIDVALUE + JOYSTICK_DEADZONE))
 80015a6:	f640 0264 	movw	r2, #2148	; 0x864
 80015aa:	4291      	cmp	r1, r2
 80015ac:	d914      	bls.n	80015d8 <MotorPWMControl+0x4c>
	{
		uint16_t speed = val2 - JOYSTICK_MIDVALUE;

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015ae:	681b      	ldr	r3, [r3, #0]
		uint16_t speed = val2 - JOYSTICK_MIDVALUE;
 80015b0:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015b4:	2200      	movs	r2, #0
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed);
 80015b6:	b289      	uxth	r1, r1
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed);
 80015ba:	6419      	str	r1, [r3, #64]	; 0x40
 80015bc:	bd10      	pop	{r4, pc}
		if(val1 < (JOYSTICK_MIDVALUE - JOYSTICK_DEADZONE))
 80015be:	f240 729b 	movw	r2, #1947	; 0x79b
 80015c2:	4290      	cmp	r0, r2
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed);
 80015c4:	681a      	ldr	r2, [r3, #0]
			int speed = JOYSTICK_MIDVALUE - val1;
 80015c6:	bf95      	itete	ls
 80015c8:	f5c0 6000 	rsbls	r0, r0, #2048	; 0x800
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015cc:	2000      	movhi	r0, #0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed);
 80015ce:	6350      	strls	r0, [r2, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015d0:	6350      	strhi	r0, [r2, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015d2:	bf98      	it	ls
 80015d4:	2000      	movls	r0, #0
 80015d6:	e7e5      	b.n	80015a4 <MotorPWMControl+0x18>
	}
	else
		if(val2 < (JOYSTICK_MIDVALUE - JOYSTICK_DEADZONE))
 80015d8:	f240 729b 	movw	r2, #1947	; 0x79b
 80015dc:	4291      	cmp	r1, r2
		{
			uint16_t speed = JOYSTICK_MIDVALUE - val2;

			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 80015de:	681b      	ldr	r3, [r3, #0]
			uint16_t speed = JOYSTICK_MIDVALUE - val2;
 80015e0:	bf97      	itett	ls
 80015e2:	f5c1 6100 	rsbls	r1, r1, #2048	; 0x800
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015e6:	2200      	movhi	r2, #0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 80015e8:	b289      	uxthls	r1, r1
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015ea:	2200      	movls	r2, #0
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, speed);
 80015ec:	bf94      	ite	ls
 80015ee:	63d9      	strls	r1, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80015f0:	63da      	strhi	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	bf00      	nop
 80015f8:	20000214 	.word	0x20000214

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b510      	push	{r4, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001600:	2230      	movs	r2, #48	; 0x30
 8001602:	2100      	movs	r1, #0
 8001604:	a808      	add	r0, sp, #32
 8001606:	f000 f9f5 	bl	80019f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160a:	2100      	movs	r1, #0
 800160c:	2214      	movs	r2, #20
 800160e:	a803      	add	r0, sp, #12
 8001610:	f000 f9f0 	bl	80019f4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2400      	movs	r4, #0
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <SystemClock_Config+0x78>)
 8001618:	9401      	str	r4, [sp, #4]
 800161a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800162e:	9402      	str	r4, [sp, #8]
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001652:	2310      	movs	r3, #16
 8001654:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f7ff f93d 	bl	80008d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800165c:	4621      	mov	r1, r4
 800165e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001662:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001668:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166a:	f7ff fb07 	bl	8000c7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800166e:	b014      	add	sp, #80	; 0x50
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <main>:
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2400      	movs	r4, #0
  HAL_Init();
 8001682:	f7fe ffb1 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001686:	f7ff ffb9 	bl	80015fc <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <main+0x104>)
 800168c:	9401      	str	r4, [sp, #4]
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  htim4.Instance = TIM4;
 8001690:	4d3c      	ldr	r5, [pc, #240]	; (8001784 <main+0x108>)
  huart1.Instance = USART1;
 8001692:	4e3d      	ldr	r6, [pc, #244]	; (8001788 <main+0x10c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f002 0201 	and.w	r2, r2, #1
 80016a0:	9201      	str	r2, [sp, #4]
 80016a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	9402      	str	r4, [sp, #8]
 80016a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a8:	f042 0202 	orr.w	r2, r2, #2
 80016ac:	631a      	str	r2, [r3, #48]	; 0x30
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	f003 0302 	and.w	r3, r3, #2
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b6:	4621      	mov	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	9302      	str	r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ba:	221c      	movs	r2, #28
 80016bc:	a805      	add	r0, sp, #20
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	9b02      	ldr	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c2:	f000 f997 	bl	80019f4 <memset>
  htim4.Init.Prescaler = 2;
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <main+0x110>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	60ac      	str	r4, [r5, #8]
  htim4.Init.Prescaler = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	e885 000c 	stmia.w	r5, {r2, r3}
  htim4.Init.Period = 2048;
 80016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d4:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016d6:	4628      	mov	r0, r5
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	61ab      	str	r3, [r5, #24]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016de:	f7ff fc4b 	bl	8000f78 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e2:	a903      	add	r1, sp, #12
 80016e4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ea:	f7ff fd17 	bl	800111c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f0:	4622      	mov	r2, r4
 80016f2:	a905      	add	r1, sp, #20
 80016f4:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 0;
 80016f8:	9406      	str	r4, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fa:	9407      	str	r4, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	f7ff fc81 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001702:	2204      	movs	r2, #4
 8001704:	a905      	add	r1, sp, #20
 8001706:	4628      	mov	r0, r5
 8001708:	f7ff fc7c 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800170c:	2208      	movs	r2, #8
 800170e:	a905      	add	r1, sp, #20
 8001710:	4628      	mov	r0, r5
 8001712:	f7ff fc77 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001716:	220c      	movs	r2, #12
 8001718:	a905      	add	r1, sp, #20
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff fc72 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8001720:	4628      	mov	r0, r5
 8001722:	f000 f873 	bl	800180c <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8001726:	491a      	ldr	r1, [pc, #104]	; (8001790 <main+0x114>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001728:	60b4      	str	r4, [r6, #8]
  huart1.Init.BaudRate = 9600;
 800172a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172e:	270c      	movs	r7, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001730:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 9600;
 8001732:	e886 000a 	stmia.w	r6, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001736:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001738:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	61f4      	str	r4, [r6, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173e:	6177      	str	r7, [r6, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001740:	f7ff fda2 	bl	8001288 <HAL_UART_Init>
  uartSyncMode = 1;	// start by receiving byte by byte until we get a end of line character
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <main+0x118>)
  HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 8001746:	4914      	ldr	r1, [pc, #80]	; (8001798 <main+0x11c>)
  uartSyncMode = 1;	// start by receiving byte by byte until we get a end of line character
 8001748:	2201      	movs	r2, #1
  HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 800174a:	4630      	mov	r0, r6
  uartSyncMode = 1;	// start by receiving byte by byte until we get a end of line character
 800174c:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, usartBuf, 1);
 800174e:	f7ff fdc9 	bl	80012e4 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001752:	4621      	mov	r1, r4
 8001754:	4628      	mov	r0, r5
 8001756:	f7ff fcc5 	bl	80010e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800175a:	2104      	movs	r1, #4
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff fcc1 	bl	80010e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001762:	2108      	movs	r1, #8
 8001764:	4628      	mov	r0, r5
 8001766:	f7ff fcbd 	bl	80010e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800176a:	4628      	mov	r0, r5
 800176c:	4639      	mov	r1, r7
 800176e:	f7ff fcb9 	bl	80010e4 <HAL_TIM_PWM_Start>
	  MotorPWMControl(joyValue1, joyValue2);
 8001772:	4d0a      	ldr	r5, [pc, #40]	; (800179c <main+0x120>)
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <main+0x124>)
 8001776:	8829      	ldrh	r1, [r5, #0]
 8001778:	8820      	ldrh	r0, [r4, #0]
 800177a:	f7ff ff07 	bl	800158c <MotorPWMControl>
 800177e:	e7fa      	b.n	8001776 <main+0xfa>
 8001780:	40023800 	.word	0x40023800
 8001784:	20000214 	.word	0x20000214
 8001788:	20000260 	.word	0x20000260
 800178c:	40000800 	.word	0x40000800
 8001790:	40011000 	.word	0x40011000
 8001794:	20000200 	.word	0x20000200
 8001798:	20000254 	.word	0x20000254
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000008 	.word	0x20000008

080017a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_MspInit+0x34>)
 80017a8:	2100      	movs	r1, #0
 80017aa:	9100      	str	r1, [sp, #0]
 80017ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
 80017b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017ba:	9200      	str	r2, [sp, #0]
 80017bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	9101      	str	r1, [sp, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	b002      	add	sp, #8
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 80017dc:	6802      	ldr	r2, [r0, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_TIM_PWM_MspInit+0x28>)
 80017e0:	429a      	cmp	r2, r3
{
 80017e2:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 80017e4:	d10b      	bne.n	80017fe <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_TIM_PWM_MspInit+0x2c>)
 80017ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ee:	f042 0204 	orr.w	r2, r2, #4
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017fe:	b002      	add	sp, #8
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40000800 	.word	0x40000800
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	4604      	mov	r4, r0
 8001810:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	2214      	movs	r2, #20
 8001814:	2100      	movs	r1, #0
 8001816:	a801      	add	r0, sp, #4
 8001818:	f000 f8ec 	bl	80019f4 <memset>
  if(htim->Instance==TIM4)
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_TIM_MspPostInit+0x48>)
 8001820:	429a      	cmp	r2, r3
 8001822:	d115      	bne.n	8001850 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182e:	f042 0202 	orr.w	r2, r2, #2
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800183e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001842:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800184a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f7fe ff74 	bl	8000738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001850:	b006      	add	sp, #24
 8001852:	bd10      	pop	{r4, pc}
 8001854:	40000800 	.word	0x40000800
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
 8001864:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	2214      	movs	r2, #20
 8001868:	2100      	movs	r1, #0
 800186a:	a803      	add	r0, sp, #12
 800186c:	f000 f8c2 	bl	80019f4 <memset>
  if(huart->Instance==USART1)
 8001870:	6822      	ldr	r2, [r4, #0]
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0x74>)
 8001874:	429a      	cmp	r2, r3
 8001876:	d12b      	bne.n	80018d0 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001878:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800187c:	2400      	movs	r4, #0
 800187e:	9401      	str	r4, [sp, #4]
 8001880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001884:	f042 0210 	orr.w	r2, r2, #16
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
 800188a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188c:	f002 0210 	and.w	r2, r2, #16
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	9402      	str	r4, [sp, #8]
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b8:	2307      	movs	r3, #7
 80018ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f7fe ff3c 	bl	8000738 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018c0:	2025      	movs	r0, #37	; 0x25
 80018c2:	4622      	mov	r2, r4
 80018c4:	4621      	mov	r1, r4
 80018c6:	f7fe fecd 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018ca:	2025      	movs	r0, #37	; 0x25
 80018cc:	f7fe fefe 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018d0:	b008      	add	sp, #32
 80018d2:	bd10      	pop	{r4, pc}
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40020000 	.word	0x40020000

080018dc <NMI_Handler>:
 80018dc:	4770      	bx	lr

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	e7fe      	b.n	80018de <HardFault_Handler>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler>

080018e6 <SVC_Handler>:
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f7fe be96 	b.w	800061c <HAL_IncTick>

080018f0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <USART1_IRQHandler+0x8>)
 80018f2:	f7ff bd5f 	b.w	80013b4 <HAL_UART_IRQHandler>
 80018f6:	bf00      	nop
 80018f8:	20000260 	.word	0x20000260

080018fc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80018fc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <_sbrk+0x2c>)
 8001900:	6819      	ldr	r1, [r3, #0]
{
 8001902:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001904:	b909      	cbnz	r1, 800190a <_sbrk+0xe>
		heap_end = &end;
 8001906:	4909      	ldr	r1, [pc, #36]	; (800192c <_sbrk+0x30>)
 8001908:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800190a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800190c:	4669      	mov	r1, sp
 800190e:	4402      	add	r2, r0
 8001910:	428a      	cmp	r2, r1
 8001912:	d906      	bls.n	8001922 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001914:	f000 f844 	bl	80019a0 <__errno>
 8001918:	230c      	movs	r3, #12
 800191a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001922:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001924:	bd08      	pop	{r3, pc}
 8001926:	bf00      	nop
 8001928:	20000204 	.word	0x20000204
 800192c:	200002a4 	.word	0x200002a4

08001930 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SystemInit+0x18>)
 8001932:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001936:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800193a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800193e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001950:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001952:	e003      	b.n	800195c <LoopCopyDataInit>

08001954 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001956:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001958:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800195a:	3104      	adds	r1, #4

0800195c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	; (800198c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001960:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001962:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001964:	d3f6      	bcc.n	8001954 <CopyDataInit>
  ldr  r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001968:	e002      	b.n	8001970 <LoopFillZerobss>

0800196a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800196a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800196c:	f842 3b04 	str.w	r3, [r2], #4

08001970 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001972:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001974:	d3f9      	bcc.n	800196a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001976:	f7ff ffdb 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f000 f817 	bl	80019ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff fe7d 	bl	800167c <main>
  bx  lr    
 8001982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001988:	080027b4 	.word	0x080027b4
  ldr  r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001990:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001994:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001998:	200002a4 	.word	0x200002a4

0800199c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC_IRQHandler>
	...

080019a0 <__errno>:
 80019a0:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <__errno+0x8>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000014 	.word	0x20000014

080019ac <__libc_init_array>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4e0d      	ldr	r6, [pc, #52]	; (80019e4 <__libc_init_array+0x38>)
 80019b0:	4c0d      	ldr	r4, [pc, #52]	; (80019e8 <__libc_init_array+0x3c>)
 80019b2:	1ba4      	subs	r4, r4, r6
 80019b4:	10a4      	asrs	r4, r4, #2
 80019b6:	2500      	movs	r5, #0
 80019b8:	42a5      	cmp	r5, r4
 80019ba:	d109      	bne.n	80019d0 <__libc_init_array+0x24>
 80019bc:	4e0b      	ldr	r6, [pc, #44]	; (80019ec <__libc_init_array+0x40>)
 80019be:	4c0c      	ldr	r4, [pc, #48]	; (80019f0 <__libc_init_array+0x44>)
 80019c0:	f000 fe08 	bl	80025d4 <_init>
 80019c4:	1ba4      	subs	r4, r4, r6
 80019c6:	10a4      	asrs	r4, r4, #2
 80019c8:	2500      	movs	r5, #0
 80019ca:	42a5      	cmp	r5, r4
 80019cc:	d105      	bne.n	80019da <__libc_init_array+0x2e>
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
 80019d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019d4:	4798      	blx	r3
 80019d6:	3501      	adds	r5, #1
 80019d8:	e7ee      	b.n	80019b8 <__libc_init_array+0xc>
 80019da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019de:	4798      	blx	r3
 80019e0:	3501      	adds	r5, #1
 80019e2:	e7f2      	b.n	80019ca <__libc_init_array+0x1e>
 80019e4:	080027ac 	.word	0x080027ac
 80019e8:	080027ac 	.word	0x080027ac
 80019ec:	080027ac 	.word	0x080027ac
 80019f0:	080027b0 	.word	0x080027b0

080019f4 <memset>:
 80019f4:	4402      	add	r2, r0
 80019f6:	4603      	mov	r3, r0
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d100      	bne.n	80019fe <memset+0xa>
 80019fc:	4770      	bx	lr
 80019fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001a02:	e7f9      	b.n	80019f8 <memset+0x4>

08001a04 <siscanf>:
 8001a04:	b40e      	push	{r1, r2, r3}
 8001a06:	b530      	push	{r4, r5, lr}
 8001a08:	b09c      	sub	sp, #112	; 0x70
 8001a0a:	ac1f      	add	r4, sp, #124	; 0x7c
 8001a0c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001a10:	f854 5b04 	ldr.w	r5, [r4], #4
 8001a14:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001a18:	9002      	str	r0, [sp, #8]
 8001a1a:	9006      	str	r0, [sp, #24]
 8001a1c:	f7fe fbe0 	bl	80001e0 <strlen>
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <siscanf+0x4c>)
 8001a22:	9003      	str	r0, [sp, #12]
 8001a24:	9007      	str	r0, [sp, #28]
 8001a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a28:	480a      	ldr	r0, [pc, #40]	; (8001a54 <siscanf+0x50>)
 8001a2a:	9401      	str	r4, [sp, #4]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001a30:	9314      	str	r3, [sp, #80]	; 0x50
 8001a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a36:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001a3a:	462a      	mov	r2, r5
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	a902      	add	r1, sp, #8
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	f000 f865 	bl	8001b10 <__ssvfiscanf_r>
 8001a46:	b01c      	add	sp, #112	; 0x70
 8001a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	4770      	bx	lr
 8001a50:	08001a59 	.word	0x08001a59
 8001a54:	20000014 	.word	0x20000014

08001a58 <__seofread>:
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_sungetc_r>:
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	1c4b      	adds	r3, r1, #1
 8001a60:	4614      	mov	r4, r2
 8001a62:	d103      	bne.n	8001a6c <_sungetc_r+0x10>
 8001a64:	f04f 35ff 	mov.w	r5, #4294967295
 8001a68:	4628      	mov	r0, r5
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	8993      	ldrh	r3, [r2, #12]
 8001a6e:	f023 0320 	bic.w	r3, r3, #32
 8001a72:	8193      	strh	r3, [r2, #12]
 8001a74:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	b2cd      	uxtb	r5, r1
 8001a7a:	b18b      	cbz	r3, 8001aa0 <_sungetc_r+0x44>
 8001a7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	da08      	bge.n	8001a94 <_sungetc_r+0x38>
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	6022      	str	r2, [r4, #0]
 8001a88:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	6063      	str	r3, [r4, #4]
 8001a92:	e7e9      	b.n	8001a68 <_sungetc_r+0xc>
 8001a94:	4621      	mov	r1, r4
 8001a96:	f000 fc39 	bl	800230c <__submore>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d0f1      	beq.n	8001a82 <_sungetc_r+0x26>
 8001a9e:	e7e1      	b.n	8001a64 <_sungetc_r+0x8>
 8001aa0:	6921      	ldr	r1, [r4, #16]
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	b151      	cbz	r1, 8001abc <_sungetc_r+0x60>
 8001aa6:	4299      	cmp	r1, r3
 8001aa8:	d208      	bcs.n	8001abc <_sungetc_r+0x60>
 8001aaa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8001aae:	428d      	cmp	r5, r1
 8001ab0:	d104      	bne.n	8001abc <_sungetc_r+0x60>
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	6023      	str	r3, [r4, #0]
 8001ab8:	6062      	str	r2, [r4, #4]
 8001aba:	e7d5      	b.n	8001a68 <_sungetc_r+0xc>
 8001abc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ac2:	6363      	str	r3, [r4, #52]	; 0x34
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ac8:	4623      	mov	r3, r4
 8001aca:	6422      	str	r2, [r4, #64]	; 0x40
 8001acc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001ad0:	6023      	str	r3, [r4, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e7dc      	b.n	8001a90 <_sungetc_r+0x34>

08001ad6 <__ssrefill_r>:
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001adc:	b169      	cbz	r1, 8001afa <__ssrefill_r+0x24>
 8001ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ae2:	4299      	cmp	r1, r3
 8001ae4:	d001      	beq.n	8001aea <__ssrefill_r+0x14>
 8001ae6:	f000 fc7b 	bl	80023e0 <_free_r>
 8001aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aec:	6063      	str	r3, [r4, #4]
 8001aee:	2000      	movs	r0, #0
 8001af0:	6360      	str	r0, [r4, #52]	; 0x34
 8001af2:	b113      	cbz	r3, 8001afa <__ssrefill_r+0x24>
 8001af4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001af6:	6023      	str	r3, [r4, #0]
 8001af8:	bd10      	pop	{r4, pc}
 8001afa:	6923      	ldr	r3, [r4, #16]
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	6063      	str	r3, [r4, #4]
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	bd10      	pop	{r4, pc}

08001b10 <__ssvfiscanf_r>:
 8001b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b14:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8001b18:	f10d 080c 	add.w	r8, sp, #12
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9346      	str	r3, [sp, #280]	; 0x118
 8001b22:	9347      	str	r3, [sp, #284]	; 0x11c
 8001b24:	4ba0      	ldr	r3, [pc, #640]	; (8001da8 <__ssvfiscanf_r+0x298>)
 8001b26:	93a2      	str	r3, [sp, #648]	; 0x288
 8001b28:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8001db0 <__ssvfiscanf_r+0x2a0>
 8001b2c:	4b9f      	ldr	r3, [pc, #636]	; (8001dac <__ssvfiscanf_r+0x29c>)
 8001b2e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8001b32:	4606      	mov	r6, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	93a3      	str	r3, [sp, #652]	; 0x28c
 8001b38:	4692      	mov	sl, r2
 8001b3a:	270a      	movs	r7, #10
 8001b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 812f 	beq.w	8001da4 <__ssvfiscanf_r+0x294>
 8001b46:	f000 fc1f 	bl	8002388 <__locale_ctype_ptr>
 8001b4a:	f89a b000 	ldrb.w	fp, [sl]
 8001b4e:	4458      	add	r0, fp
 8001b50:	7843      	ldrb	r3, [r0, #1]
 8001b52:	f013 0308 	ands.w	r3, r3, #8
 8001b56:	d143      	bne.n	8001be0 <__ssvfiscanf_r+0xd0>
 8001b58:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8001b5c:	f10a 0501 	add.w	r5, sl, #1
 8001b60:	f040 8099 	bne.w	8001c96 <__ssvfiscanf_r+0x186>
 8001b64:	9345      	str	r3, [sp, #276]	; 0x114
 8001b66:	9343      	str	r3, [sp, #268]	; 0x10c
 8001b68:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8001b6e:	d103      	bne.n	8001b78 <__ssvfiscanf_r+0x68>
 8001b70:	2310      	movs	r3, #16
 8001b72:	9343      	str	r3, [sp, #268]	; 0x10c
 8001b74:	f10a 0502 	add.w	r5, sl, #2
 8001b78:	7829      	ldrb	r1, [r5, #0]
 8001b7a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001b7e:	2a09      	cmp	r2, #9
 8001b80:	46aa      	mov	sl, r5
 8001b82:	f105 0501 	add.w	r5, r5, #1
 8001b86:	d941      	bls.n	8001c0c <__ssvfiscanf_r+0xfc>
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4889      	ldr	r0, [pc, #548]	; (8001db0 <__ssvfiscanf_r+0x2a0>)
 8001b8c:	f7fe fb30 	bl	80001f0 <memchr>
 8001b90:	b138      	cbz	r0, 8001ba2 <__ssvfiscanf_r+0x92>
 8001b92:	eba0 0309 	sub.w	r3, r0, r9
 8001b96:	2001      	movs	r0, #1
 8001b98:	4098      	lsls	r0, r3
 8001b9a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001b9c:	4318      	orrs	r0, r3
 8001b9e:	9043      	str	r0, [sp, #268]	; 0x10c
 8001ba0:	46aa      	mov	sl, r5
 8001ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ba6:	2b67      	cmp	r3, #103	; 0x67
 8001ba8:	f10a 0501 	add.w	r5, sl, #1
 8001bac:	d84a      	bhi.n	8001c44 <__ssvfiscanf_r+0x134>
 8001bae:	2b65      	cmp	r3, #101	; 0x65
 8001bb0:	f080 80b7 	bcs.w	8001d22 <__ssvfiscanf_r+0x212>
 8001bb4:	2b47      	cmp	r3, #71	; 0x47
 8001bb6:	d82f      	bhi.n	8001c18 <__ssvfiscanf_r+0x108>
 8001bb8:	2b45      	cmp	r3, #69	; 0x45
 8001bba:	f080 80b2 	bcs.w	8001d22 <__ssvfiscanf_r+0x212>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8082 	beq.w	8001cc8 <__ssvfiscanf_r+0x1b8>
 8001bc4:	2b25      	cmp	r3, #37	; 0x25
 8001bc6:	d066      	beq.n	8001c96 <__ssvfiscanf_r+0x186>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	9349      	str	r3, [sp, #292]	; 0x124
 8001bcc:	9744      	str	r7, [sp, #272]	; 0x110
 8001bce:	e045      	b.n	8001c5c <__ssvfiscanf_r+0x14c>
 8001bd0:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8001bd2:	3101      	adds	r1, #1
 8001bd4:	9147      	str	r1, [sp, #284]	; 0x11c
 8001bd6:	6861      	ldr	r1, [r4, #4]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	3901      	subs	r1, #1
 8001bdc:	6061      	str	r1, [r4, #4]
 8001bde:	6023      	str	r3, [r4, #0]
 8001be0:	6863      	ldr	r3, [r4, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	dd0b      	ble.n	8001bfe <__ssvfiscanf_r+0xee>
 8001be6:	f000 fbcf 	bl	8002388 <__locale_ctype_ptr>
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	7819      	ldrb	r1, [r3, #0]
 8001bee:	4408      	add	r0, r1
 8001bf0:	7841      	ldrb	r1, [r0, #1]
 8001bf2:	070d      	lsls	r5, r1, #28
 8001bf4:	d4ec      	bmi.n	8001bd0 <__ssvfiscanf_r+0xc0>
 8001bf6:	f10a 0501 	add.w	r5, sl, #1
 8001bfa:	46aa      	mov	sl, r5
 8001bfc:	e79e      	b.n	8001b3c <__ssvfiscanf_r+0x2c>
 8001bfe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001c00:	4621      	mov	r1, r4
 8001c02:	4630      	mov	r0, r6
 8001c04:	4798      	blx	r3
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d0ed      	beq.n	8001be6 <__ssvfiscanf_r+0xd6>
 8001c0a:	e7f4      	b.n	8001bf6 <__ssvfiscanf_r+0xe6>
 8001c0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001c0e:	fb07 1303 	mla	r3, r7, r3, r1
 8001c12:	3b30      	subs	r3, #48	; 0x30
 8001c14:	9345      	str	r3, [sp, #276]	; 0x114
 8001c16:	e7af      	b.n	8001b78 <__ssvfiscanf_r+0x68>
 8001c18:	2b5b      	cmp	r3, #91	; 0x5b
 8001c1a:	d061      	beq.n	8001ce0 <__ssvfiscanf_r+0x1d0>
 8001c1c:	d80c      	bhi.n	8001c38 <__ssvfiscanf_r+0x128>
 8001c1e:	2b58      	cmp	r3, #88	; 0x58
 8001c20:	d1d2      	bne.n	8001bc8 <__ssvfiscanf_r+0xb8>
 8001c22:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8001c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c28:	9243      	str	r2, [sp, #268]	; 0x10c
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	9244      	str	r2, [sp, #272]	; 0x110
 8001c2e:	2b6f      	cmp	r3, #111	; 0x6f
 8001c30:	bfb4      	ite	lt
 8001c32:	2303      	movlt	r3, #3
 8001c34:	2304      	movge	r3, #4
 8001c36:	e010      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001c38:	2b63      	cmp	r3, #99	; 0x63
 8001c3a:	d05c      	beq.n	8001cf6 <__ssvfiscanf_r+0x1e6>
 8001c3c:	2b64      	cmp	r3, #100	; 0x64
 8001c3e:	d1c3      	bne.n	8001bc8 <__ssvfiscanf_r+0xb8>
 8001c40:	9744      	str	r7, [sp, #272]	; 0x110
 8001c42:	e7f4      	b.n	8001c2e <__ssvfiscanf_r+0x11e>
 8001c44:	2b70      	cmp	r3, #112	; 0x70
 8001c46:	d042      	beq.n	8001cce <__ssvfiscanf_r+0x1be>
 8001c48:	d81d      	bhi.n	8001c86 <__ssvfiscanf_r+0x176>
 8001c4a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c4c:	d059      	beq.n	8001d02 <__ssvfiscanf_r+0x1f2>
 8001c4e:	d843      	bhi.n	8001cd8 <__ssvfiscanf_r+0x1c8>
 8001c50:	2b69      	cmp	r3, #105	; 0x69
 8001c52:	d1b9      	bne.n	8001bc8 <__ssvfiscanf_r+0xb8>
 8001c54:	2300      	movs	r3, #0
 8001c56:	9344      	str	r3, [sp, #272]	; 0x110
 8001c58:	2303      	movs	r3, #3
 8001c5a:	9349      	str	r3, [sp, #292]	; 0x124
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dd61      	ble.n	8001d26 <__ssvfiscanf_r+0x216>
 8001c62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001c64:	0659      	lsls	r1, r3, #25
 8001c66:	d56f      	bpl.n	8001d48 <__ssvfiscanf_r+0x238>
 8001c68:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	dc7c      	bgt.n	8001d68 <__ssvfiscanf_r+0x258>
 8001c6e:	ab01      	add	r3, sp, #4
 8001c70:	4622      	mov	r2, r4
 8001c72:	a943      	add	r1, sp, #268	; 0x10c
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 f89f 	bl	8001db8 <_scanf_chars>
 8001c7a:	2801      	cmp	r0, #1
 8001c7c:	f000 8092 	beq.w	8001da4 <__ssvfiscanf_r+0x294>
 8001c80:	2802      	cmp	r0, #2
 8001c82:	d1ba      	bne.n	8001bfa <__ssvfiscanf_r+0xea>
 8001c84:	e01d      	b.n	8001cc2 <__ssvfiscanf_r+0x1b2>
 8001c86:	2b75      	cmp	r3, #117	; 0x75
 8001c88:	d0da      	beq.n	8001c40 <__ssvfiscanf_r+0x130>
 8001c8a:	2b78      	cmp	r3, #120	; 0x78
 8001c8c:	d0c9      	beq.n	8001c22 <__ssvfiscanf_r+0x112>
 8001c8e:	2b73      	cmp	r3, #115	; 0x73
 8001c90:	d19a      	bne.n	8001bc8 <__ssvfiscanf_r+0xb8>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e7e1      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	dd0c      	ble.n	8001cb6 <__ssvfiscanf_r+0x1a6>
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4593      	cmp	fp, r2
 8001ca2:	d17f      	bne.n	8001da4 <__ssvfiscanf_r+0x294>
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	6862      	ldr	r2, [r4, #4]
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001cac:	3a01      	subs	r2, #1
 8001cae:	3301      	adds	r3, #1
 8001cb0:	6062      	str	r2, [r4, #4]
 8001cb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8001cb4:	e7a1      	b.n	8001bfa <__ssvfiscanf_r+0xea>
 8001cb6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001cb8:	4621      	mov	r1, r4
 8001cba:	4630      	mov	r0, r6
 8001cbc:	4798      	blx	r3
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	d0ec      	beq.n	8001c9c <__ssvfiscanf_r+0x18c>
 8001cc2:	9846      	ldr	r0, [sp, #280]	; 0x118
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	d163      	bne.n	8001d90 <__ssvfiscanf_r+0x280>
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	e066      	b.n	8001d9c <__ssvfiscanf_r+0x28c>
 8001cce:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	9243      	str	r2, [sp, #268]	; 0x10c
 8001cd6:	e7a4      	b.n	8001c22 <__ssvfiscanf_r+0x112>
 8001cd8:	2308      	movs	r3, #8
 8001cda:	9344      	str	r3, [sp, #272]	; 0x110
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e7bc      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	f000 f9c0 	bl	8002068 <__sccl>
 8001ce8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	9343      	str	r3, [sp, #268]	; 0x10c
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e7b1      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001cf6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfc:	9343      	str	r3, [sp, #268]	; 0x10c
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e7ab      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001d02:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8001d04:	06d0      	lsls	r0, r2, #27
 8001d06:	f53f af78 	bmi.w	8001bfa <__ssvfiscanf_r+0xea>
 8001d0a:	f012 0f01 	tst.w	r2, #1
 8001d0e:	9a01      	ldr	r2, [sp, #4]
 8001d10:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001d12:	f102 0104 	add.w	r1, r2, #4
 8001d16:	9101      	str	r1, [sp, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	bf14      	ite	ne
 8001d1c:	8013      	strhne	r3, [r2, #0]
 8001d1e:	6013      	streq	r3, [r2, #0]
 8001d20:	e76b      	b.n	8001bfa <__ssvfiscanf_r+0xea>
 8001d22:	2305      	movs	r3, #5
 8001d24:	e799      	b.n	8001c5a <__ssvfiscanf_r+0x14a>
 8001d26:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001d28:	4621      	mov	r1, r4
 8001d2a:	4630      	mov	r0, r6
 8001d2c:	4798      	blx	r3
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d097      	beq.n	8001c62 <__ssvfiscanf_r+0x152>
 8001d32:	e7c6      	b.n	8001cc2 <__ssvfiscanf_r+0x1b2>
 8001d34:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8001d36:	3201      	adds	r2, #1
 8001d38:	9247      	str	r2, [sp, #284]	; 0x11c
 8001d3a:	6862      	ldr	r2, [r4, #4]
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	2a00      	cmp	r2, #0
 8001d40:	6062      	str	r2, [r4, #4]
 8001d42:	dd0a      	ble.n	8001d5a <__ssvfiscanf_r+0x24a>
 8001d44:	3301      	adds	r3, #1
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	f000 fb1e 	bl	8002388 <__locale_ctype_ptr>
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	4410      	add	r0, r2
 8001d52:	7842      	ldrb	r2, [r0, #1]
 8001d54:	0712      	lsls	r2, r2, #28
 8001d56:	d4ed      	bmi.n	8001d34 <__ssvfiscanf_r+0x224>
 8001d58:	e786      	b.n	8001c68 <__ssvfiscanf_r+0x158>
 8001d5a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	4630      	mov	r0, r6
 8001d60:	4798      	blx	r3
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d0f0      	beq.n	8001d48 <__ssvfiscanf_r+0x238>
 8001d66:	e7ac      	b.n	8001cc2 <__ssvfiscanf_r+0x1b2>
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	dc06      	bgt.n	8001d7a <__ssvfiscanf_r+0x26a>
 8001d6c:	ab01      	add	r3, sp, #4
 8001d6e:	4622      	mov	r2, r4
 8001d70:	a943      	add	r1, sp, #268	; 0x10c
 8001d72:	4630      	mov	r0, r6
 8001d74:	f000 f884 	bl	8001e80 <_scanf_i>
 8001d78:	e77f      	b.n	8001c7a <__ssvfiscanf_r+0x16a>
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <__ssvfiscanf_r+0x2a4>)
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f43f af3c 	beq.w	8001bfa <__ssvfiscanf_r+0xea>
 8001d82:	ab01      	add	r3, sp, #4
 8001d84:	4622      	mov	r2, r4
 8001d86:	a943      	add	r1, sp, #268	; 0x10c
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f3af 8000 	nop.w
 8001d8e:	e774      	b.n	8001c7a <__ssvfiscanf_r+0x16a>
 8001d90:	89a3      	ldrh	r3, [r4, #12]
 8001d92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d96:	bf18      	it	ne
 8001d98:	f04f 30ff 	movne.w	r0, #4294967295
 8001d9c:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8001da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001da4:	9846      	ldr	r0, [sp, #280]	; 0x118
 8001da6:	e7f9      	b.n	8001d9c <__ssvfiscanf_r+0x28c>
 8001da8:	08001a5d 	.word	0x08001a5d
 8001dac:	08001ad7 	.word	0x08001ad7
 8001db0:	08002616 	.word	0x08002616
 8001db4:	00000000 	.word	0x00000000

08001db8 <_scanf_chars>:
 8001db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbc:	4615      	mov	r5, r2
 8001dbe:	688a      	ldr	r2, [r1, #8]
 8001dc0:	4680      	mov	r8, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	b932      	cbnz	r2, 8001dd4 <_scanf_chars+0x1c>
 8001dc6:	698a      	ldr	r2, [r1, #24]
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2201      	moveq	r2, #1
 8001dce:	f04f 32ff 	movne.w	r2, #4294967295
 8001dd2:	608a      	str	r2, [r1, #8]
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	06d1      	lsls	r1, r2, #27
 8001dd8:	bf5f      	itttt	pl
 8001dda:	681a      	ldrpl	r2, [r3, #0]
 8001ddc:	1d11      	addpl	r1, r2, #4
 8001dde:	6019      	strpl	r1, [r3, #0]
 8001de0:	6817      	ldrpl	r7, [r2, #0]
 8001de2:	2600      	movs	r6, #0
 8001de4:	69a3      	ldr	r3, [r4, #24]
 8001de6:	b1db      	cbz	r3, 8001e20 <_scanf_chars+0x68>
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <_scanf_chars+0x44>
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	6962      	ldr	r2, [r4, #20]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	b9a3      	cbnz	r3, 8001e20 <_scanf_chars+0x68>
 8001df6:	2e00      	cmp	r6, #0
 8001df8:	d132      	bne.n	8001e60 <_scanf_chars+0xa8>
 8001dfa:	e006      	b.n	8001e0a <_scanf_chars+0x52>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d007      	beq.n	8001e10 <_scanf_chars+0x58>
 8001e00:	2e00      	cmp	r6, #0
 8001e02:	d12d      	bne.n	8001e60 <_scanf_chars+0xa8>
 8001e04:	69a3      	ldr	r3, [r4, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d12a      	bne.n	8001e60 <_scanf_chars+0xa8>
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e10:	f000 faba 	bl	8002388 <__locale_ctype_ptr>
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4418      	add	r0, r3
 8001e1a:	7843      	ldrb	r3, [r0, #1]
 8001e1c:	071b      	lsls	r3, r3, #28
 8001e1e:	d4ef      	bmi.n	8001e00 <_scanf_chars+0x48>
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	06da      	lsls	r2, r3, #27
 8001e24:	bf5e      	ittt	pl
 8001e26:	682b      	ldrpl	r3, [r5, #0]
 8001e28:	781b      	ldrbpl	r3, [r3, #0]
 8001e2a:	703b      	strbpl	r3, [r7, #0]
 8001e2c:	682a      	ldr	r2, [r5, #0]
 8001e2e:	686b      	ldr	r3, [r5, #4]
 8001e30:	f102 0201 	add.w	r2, r2, #1
 8001e34:	602a      	str	r2, [r5, #0]
 8001e36:	68a2      	ldr	r2, [r4, #8]
 8001e38:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e3c:	f102 32ff 	add.w	r2, r2, #4294967295
 8001e40:	606b      	str	r3, [r5, #4]
 8001e42:	f106 0601 	add.w	r6, r6, #1
 8001e46:	bf58      	it	pl
 8001e48:	3701      	addpl	r7, #1
 8001e4a:	60a2      	str	r2, [r4, #8]
 8001e4c:	b142      	cbz	r2, 8001e60 <_scanf_chars+0xa8>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dcc8      	bgt.n	8001de4 <_scanf_chars+0x2c>
 8001e52:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001e56:	4629      	mov	r1, r5
 8001e58:	4640      	mov	r0, r8
 8001e5a:	4798      	blx	r3
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d0c1      	beq.n	8001de4 <_scanf_chars+0x2c>
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f013 0310 	ands.w	r3, r3, #16
 8001e66:	d105      	bne.n	8001e74 <_scanf_chars+0xbc>
 8001e68:	68e2      	ldr	r2, [r4, #12]
 8001e6a:	3201      	adds	r2, #1
 8001e6c:	60e2      	str	r2, [r4, #12]
 8001e6e:	69a2      	ldr	r2, [r4, #24]
 8001e70:	b102      	cbz	r2, 8001e74 <_scanf_chars+0xbc>
 8001e72:	703b      	strb	r3, [r7, #0]
 8001e74:	6923      	ldr	r3, [r4, #16]
 8001e76:	441e      	add	r6, r3
 8001e78:	6126      	str	r6, [r4, #16]
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e80 <_scanf_i>:
 8001e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e84:	469a      	mov	sl, r3
 8001e86:	4b74      	ldr	r3, [pc, #464]	; (8002058 <_scanf_i+0x1d8>)
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4683      	mov	fp, r0
 8001e8c:	4616      	mov	r6, r2
 8001e8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e92:	b087      	sub	sp, #28
 8001e94:	ab03      	add	r3, sp, #12
 8001e96:	68a7      	ldr	r7, [r4, #8]
 8001e98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	; (800205c <_scanf_i+0x1dc>)
 8001e9e:	69a1      	ldr	r1, [r4, #24]
 8001ea0:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <_scanf_i+0x1e0>)
 8001ea2:	2903      	cmp	r1, #3
 8001ea4:	bf18      	it	ne
 8001ea6:	461a      	movne	r2, r3
 8001ea8:	1e7b      	subs	r3, r7, #1
 8001eaa:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8001eae:	bf84      	itt	hi
 8001eb0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001eb4:	60a3      	strhi	r3, [r4, #8]
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001ebe:	bf88      	it	hi
 8001ec0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001ec4:	f104 091c 	add.w	r9, r4, #28
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	bf8c      	ite	hi
 8001ecc:	197f      	addhi	r7, r7, r5
 8001ece:	2700      	movls	r7, #0
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	f04f 0800 	mov.w	r8, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	6831      	ldr	r1, [r6, #0]
 8001eda:	ab03      	add	r3, sp, #12
 8001edc:	2202      	movs	r2, #2
 8001ede:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8001ee2:	7809      	ldrb	r1, [r1, #0]
 8001ee4:	f7fe f984 	bl	80001f0 <memchr>
 8001ee8:	9b01      	ldr	r3, [sp, #4]
 8001eea:	b328      	cbz	r0, 8001f38 <_scanf_i+0xb8>
 8001eec:	f1b8 0f01 	cmp.w	r8, #1
 8001ef0:	d156      	bne.n	8001fa0 <_scanf_i+0x120>
 8001ef2:	6862      	ldr	r2, [r4, #4]
 8001ef4:	b92a      	cbnz	r2, 8001f02 <_scanf_i+0x82>
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	6062      	str	r2, [r4, #4]
 8001efa:	6822      	ldr	r2, [r4, #0]
 8001efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f00:	6022      	str	r2, [r4, #0]
 8001f02:	6822      	ldr	r2, [r4, #0]
 8001f04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001f08:	6022      	str	r2, [r4, #0]
 8001f0a:	68a2      	ldr	r2, [r4, #8]
 8001f0c:	1e51      	subs	r1, r2, #1
 8001f0e:	60a1      	str	r1, [r4, #8]
 8001f10:	b192      	cbz	r2, 8001f38 <_scanf_i+0xb8>
 8001f12:	6832      	ldr	r2, [r6, #0]
 8001f14:	1c51      	adds	r1, r2, #1
 8001f16:	6031      	str	r1, [r6, #0]
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	1c5d      	adds	r5, r3, #1
 8001f1e:	6873      	ldr	r3, [r6, #4]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	6073      	str	r3, [r6, #4]
 8001f26:	dc06      	bgt.n	8001f36 <_scanf_i+0xb6>
 8001f28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001f2c:	4631      	mov	r1, r6
 8001f2e:	4658      	mov	r0, fp
 8001f30:	4798      	blx	r3
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d176      	bne.n	8002024 <_scanf_i+0x1a4>
 8001f36:	462b      	mov	r3, r5
 8001f38:	f108 0801 	add.w	r8, r8, #1
 8001f3c:	f1b8 0f03 	cmp.w	r8, #3
 8001f40:	d1c9      	bne.n	8001ed6 <_scanf_i+0x56>
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	b90a      	cbnz	r2, 8001f4a <_scanf_i+0xca>
 8001f46:	220a      	movs	r2, #10
 8001f48:	6062      	str	r2, [r4, #4]
 8001f4a:	6862      	ldr	r2, [r4, #4]
 8001f4c:	4945      	ldr	r1, [pc, #276]	; (8002064 <_scanf_i+0x1e4>)
 8001f4e:	6960      	ldr	r0, [r4, #20]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	1a89      	subs	r1, r1, r2
 8001f54:	f000 f888 	bl	8002068 <__sccl>
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	f04f 0800 	mov.w	r8, #0
 8001f5e:	461d      	mov	r5, r3
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d038      	beq.n	8001fd8 <_scanf_i+0x158>
 8001f66:	6831      	ldr	r1, [r6, #0]
 8001f68:	6960      	ldr	r0, [r4, #20]
 8001f6a:	780a      	ldrb	r2, [r1, #0]
 8001f6c:	5c80      	ldrb	r0, [r0, r2]
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d032      	beq.n	8001fd8 <_scanf_i+0x158>
 8001f72:	2a30      	cmp	r2, #48	; 0x30
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	d121      	bne.n	8001fbc <_scanf_i+0x13c>
 8001f78:	0510      	lsls	r0, r2, #20
 8001f7a:	d51f      	bpl.n	8001fbc <_scanf_i+0x13c>
 8001f7c:	f108 0801 	add.w	r8, r8, #1
 8001f80:	b117      	cbz	r7, 8001f88 <_scanf_i+0x108>
 8001f82:	3301      	adds	r3, #1
 8001f84:	3f01      	subs	r7, #1
 8001f86:	60a3      	str	r3, [r4, #8]
 8001f88:	6873      	ldr	r3, [r6, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	6073      	str	r3, [r6, #4]
 8001f90:	dd1b      	ble.n	8001fca <_scanf_i+0x14a>
 8001f92:	6833      	ldr	r3, [r6, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	6033      	str	r3, [r6, #0]
 8001f98:	68a3      	ldr	r3, [r4, #8]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	60a3      	str	r3, [r4, #8]
 8001f9e:	e7df      	b.n	8001f60 <_scanf_i+0xe0>
 8001fa0:	f1b8 0f02 	cmp.w	r8, #2
 8001fa4:	d1b1      	bne.n	8001f0a <_scanf_i+0x8a>
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001fac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001fb0:	d1c2      	bne.n	8001f38 <_scanf_i+0xb8>
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	6061      	str	r1, [r4, #4]
 8001fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fba:	e7a5      	b.n	8001f08 <_scanf_i+0x88>
 8001fbc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001fc0:	6022      	str	r2, [r4, #0]
 8001fc2:	780b      	ldrb	r3, [r1, #0]
 8001fc4:	702b      	strb	r3, [r5, #0]
 8001fc6:	3501      	adds	r5, #1
 8001fc8:	e7de      	b.n	8001f88 <_scanf_i+0x108>
 8001fca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001fce:	4631      	mov	r1, r6
 8001fd0:	4658      	mov	r0, fp
 8001fd2:	4798      	blx	r3
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d0df      	beq.n	8001f98 <_scanf_i+0x118>
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	05d9      	lsls	r1, r3, #23
 8001fdc:	d50c      	bpl.n	8001ff8 <_scanf_i+0x178>
 8001fde:	454d      	cmp	r5, r9
 8001fe0:	d908      	bls.n	8001ff4 <_scanf_i+0x174>
 8001fe2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001fea:	4632      	mov	r2, r6
 8001fec:	4658      	mov	r0, fp
 8001fee:	4798      	blx	r3
 8001ff0:	1e6f      	subs	r7, r5, #1
 8001ff2:	463d      	mov	r5, r7
 8001ff4:	454d      	cmp	r5, r9
 8001ff6:	d02c      	beq.n	8002052 <_scanf_i+0x1d2>
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	f012 0210 	ands.w	r2, r2, #16
 8001ffe:	d11e      	bne.n	800203e <_scanf_i+0x1be>
 8002000:	702a      	strb	r2, [r5, #0]
 8002002:	6863      	ldr	r3, [r4, #4]
 8002004:	9e00      	ldr	r6, [sp, #0]
 8002006:	4649      	mov	r1, r9
 8002008:	4658      	mov	r0, fp
 800200a:	47b0      	blx	r6
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	f8da 3000 	ldr.w	r3, [sl]
 8002012:	f012 0f20 	tst.w	r2, #32
 8002016:	d008      	beq.n	800202a <_scanf_i+0x1aa>
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	f8ca 2000 	str.w	r2, [sl]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6018      	str	r0, [r3, #0]
 8002022:	e009      	b.n	8002038 <_scanf_i+0x1b8>
 8002024:	f04f 0800 	mov.w	r8, #0
 8002028:	e7d6      	b.n	8001fd8 <_scanf_i+0x158>
 800202a:	07d2      	lsls	r2, r2, #31
 800202c:	d5f4      	bpl.n	8002018 <_scanf_i+0x198>
 800202e:	1d1a      	adds	r2, r3, #4
 8002030:	f8ca 2000 	str.w	r2, [sl]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	8018      	strh	r0, [r3, #0]
 8002038:	68e3      	ldr	r3, [r4, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60e3      	str	r3, [r4, #12]
 800203e:	eba5 0509 	sub.w	r5, r5, r9
 8002042:	44a8      	add	r8, r5
 8002044:	6925      	ldr	r5, [r4, #16]
 8002046:	4445      	add	r5, r8
 8002048:	6125      	str	r5, [r4, #16]
 800204a:	2000      	movs	r0, #0
 800204c:	b007      	add	sp, #28
 800204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002052:	2001      	movs	r0, #1
 8002054:	e7fa      	b.n	800204c <_scanf_i+0x1cc>
 8002056:	bf00      	nop
 8002058:	080025ec 	.word	0x080025ec
 800205c:	080022e9 	.word	0x080022e9
 8002060:	080021c9 	.word	0x080021c9
 8002064:	0800262a 	.word	0x0800262a

08002068 <__sccl>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	780b      	ldrb	r3, [r1, #0]
 800206c:	2b5e      	cmp	r3, #94	; 0x5e
 800206e:	bf13      	iteet	ne
 8002070:	1c4a      	addne	r2, r1, #1
 8002072:	1c8a      	addeq	r2, r1, #2
 8002074:	784b      	ldrbeq	r3, [r1, #1]
 8002076:	2100      	movne	r1, #0
 8002078:	bf08      	it	eq
 800207a:	2101      	moveq	r1, #1
 800207c:	1e44      	subs	r4, r0, #1
 800207e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002082:	f804 1f01 	strb.w	r1, [r4, #1]!
 8002086:	42a5      	cmp	r5, r4
 8002088:	d1fb      	bne.n	8002082 <__sccl+0x1a>
 800208a:	b913      	cbnz	r3, 8002092 <__sccl+0x2a>
 800208c:	3a01      	subs	r2, #1
 800208e:	4610      	mov	r0, r2
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	f081 0401 	eor.w	r4, r1, #1
 8002096:	54c4      	strb	r4, [r0, r3]
 8002098:	4611      	mov	r1, r2
 800209a:	780d      	ldrb	r5, [r1, #0]
 800209c:	2d2d      	cmp	r5, #45	; 0x2d
 800209e:	f101 0201 	add.w	r2, r1, #1
 80020a2:	d006      	beq.n	80020b2 <__sccl+0x4a>
 80020a4:	2d5d      	cmp	r5, #93	; 0x5d
 80020a6:	d0f2      	beq.n	800208e <__sccl+0x26>
 80020a8:	b90d      	cbnz	r5, 80020ae <__sccl+0x46>
 80020aa:	460a      	mov	r2, r1
 80020ac:	e7ef      	b.n	800208e <__sccl+0x26>
 80020ae:	462b      	mov	r3, r5
 80020b0:	e7f1      	b.n	8002096 <__sccl+0x2e>
 80020b2:	784e      	ldrb	r6, [r1, #1]
 80020b4:	2e5d      	cmp	r6, #93	; 0x5d
 80020b6:	d0fa      	beq.n	80020ae <__sccl+0x46>
 80020b8:	42b3      	cmp	r3, r6
 80020ba:	dcf8      	bgt.n	80020ae <__sccl+0x46>
 80020bc:	3102      	adds	r1, #2
 80020be:	3301      	adds	r3, #1
 80020c0:	429e      	cmp	r6, r3
 80020c2:	54c4      	strb	r4, [r0, r3]
 80020c4:	dcfb      	bgt.n	80020be <__sccl+0x56>
 80020c6:	e7e8      	b.n	800209a <__sccl+0x32>

080020c8 <_strtol_l.isra.0>:
 80020c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020cc:	4680      	mov	r8, r0
 80020ce:	4689      	mov	r9, r1
 80020d0:	4692      	mov	sl, r2
 80020d2:	461f      	mov	r7, r3
 80020d4:	468b      	mov	fp, r1
 80020d6:	465d      	mov	r5, fp
 80020d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80020da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80020de:	f000 f950 	bl	8002382 <__locale_ctype_ptr_l>
 80020e2:	4420      	add	r0, r4
 80020e4:	7846      	ldrb	r6, [r0, #1]
 80020e6:	f016 0608 	ands.w	r6, r6, #8
 80020ea:	d10b      	bne.n	8002104 <_strtol_l.isra.0+0x3c>
 80020ec:	2c2d      	cmp	r4, #45	; 0x2d
 80020ee:	d10b      	bne.n	8002108 <_strtol_l.isra.0+0x40>
 80020f0:	782c      	ldrb	r4, [r5, #0]
 80020f2:	2601      	movs	r6, #1
 80020f4:	f10b 0502 	add.w	r5, fp, #2
 80020f8:	b167      	cbz	r7, 8002114 <_strtol_l.isra.0+0x4c>
 80020fa:	2f10      	cmp	r7, #16
 80020fc:	d114      	bne.n	8002128 <_strtol_l.isra.0+0x60>
 80020fe:	2c30      	cmp	r4, #48	; 0x30
 8002100:	d00a      	beq.n	8002118 <_strtol_l.isra.0+0x50>
 8002102:	e011      	b.n	8002128 <_strtol_l.isra.0+0x60>
 8002104:	46ab      	mov	fp, r5
 8002106:	e7e6      	b.n	80020d6 <_strtol_l.isra.0+0xe>
 8002108:	2c2b      	cmp	r4, #43	; 0x2b
 800210a:	bf04      	itt	eq
 800210c:	782c      	ldrbeq	r4, [r5, #0]
 800210e:	f10b 0502 	addeq.w	r5, fp, #2
 8002112:	e7f1      	b.n	80020f8 <_strtol_l.isra.0+0x30>
 8002114:	2c30      	cmp	r4, #48	; 0x30
 8002116:	d127      	bne.n	8002168 <_strtol_l.isra.0+0xa0>
 8002118:	782b      	ldrb	r3, [r5, #0]
 800211a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800211e:	2b58      	cmp	r3, #88	; 0x58
 8002120:	d14b      	bne.n	80021ba <_strtol_l.isra.0+0xf2>
 8002122:	786c      	ldrb	r4, [r5, #1]
 8002124:	2710      	movs	r7, #16
 8002126:	3502      	adds	r5, #2
 8002128:	2e00      	cmp	r6, #0
 800212a:	bf0c      	ite	eq
 800212c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002130:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002134:	2200      	movs	r2, #0
 8002136:	fbb1 fef7 	udiv	lr, r1, r7
 800213a:	4610      	mov	r0, r2
 800213c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002140:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002144:	2b09      	cmp	r3, #9
 8002146:	d811      	bhi.n	800216c <_strtol_l.isra.0+0xa4>
 8002148:	461c      	mov	r4, r3
 800214a:	42a7      	cmp	r7, r4
 800214c:	dd1d      	ble.n	800218a <_strtol_l.isra.0+0xc2>
 800214e:	1c53      	adds	r3, r2, #1
 8002150:	d007      	beq.n	8002162 <_strtol_l.isra.0+0x9a>
 8002152:	4586      	cmp	lr, r0
 8002154:	d316      	bcc.n	8002184 <_strtol_l.isra.0+0xbc>
 8002156:	d101      	bne.n	800215c <_strtol_l.isra.0+0x94>
 8002158:	45a4      	cmp	ip, r4
 800215a:	db13      	blt.n	8002184 <_strtol_l.isra.0+0xbc>
 800215c:	fb00 4007 	mla	r0, r0, r7, r4
 8002160:	2201      	movs	r2, #1
 8002162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002166:	e7eb      	b.n	8002140 <_strtol_l.isra.0+0x78>
 8002168:	270a      	movs	r7, #10
 800216a:	e7dd      	b.n	8002128 <_strtol_l.isra.0+0x60>
 800216c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002170:	2b19      	cmp	r3, #25
 8002172:	d801      	bhi.n	8002178 <_strtol_l.isra.0+0xb0>
 8002174:	3c37      	subs	r4, #55	; 0x37
 8002176:	e7e8      	b.n	800214a <_strtol_l.isra.0+0x82>
 8002178:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800217c:	2b19      	cmp	r3, #25
 800217e:	d804      	bhi.n	800218a <_strtol_l.isra.0+0xc2>
 8002180:	3c57      	subs	r4, #87	; 0x57
 8002182:	e7e2      	b.n	800214a <_strtol_l.isra.0+0x82>
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	e7eb      	b.n	8002162 <_strtol_l.isra.0+0x9a>
 800218a:	1c53      	adds	r3, r2, #1
 800218c:	d108      	bne.n	80021a0 <_strtol_l.isra.0+0xd8>
 800218e:	2322      	movs	r3, #34	; 0x22
 8002190:	f8c8 3000 	str.w	r3, [r8]
 8002194:	4608      	mov	r0, r1
 8002196:	f1ba 0f00 	cmp.w	sl, #0
 800219a:	d107      	bne.n	80021ac <_strtol_l.isra.0+0xe4>
 800219c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a0:	b106      	cbz	r6, 80021a4 <_strtol_l.isra.0+0xdc>
 80021a2:	4240      	negs	r0, r0
 80021a4:	f1ba 0f00 	cmp.w	sl, #0
 80021a8:	d00c      	beq.n	80021c4 <_strtol_l.isra.0+0xfc>
 80021aa:	b122      	cbz	r2, 80021b6 <_strtol_l.isra.0+0xee>
 80021ac:	3d01      	subs	r5, #1
 80021ae:	f8ca 5000 	str.w	r5, [sl]
 80021b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b6:	464d      	mov	r5, r9
 80021b8:	e7f9      	b.n	80021ae <_strtol_l.isra.0+0xe6>
 80021ba:	2430      	movs	r4, #48	; 0x30
 80021bc:	2f00      	cmp	r7, #0
 80021be:	d1b3      	bne.n	8002128 <_strtol_l.isra.0+0x60>
 80021c0:	2708      	movs	r7, #8
 80021c2:	e7b1      	b.n	8002128 <_strtol_l.isra.0+0x60>
 80021c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021c8 <_strtol_r>:
 80021c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021ca:	4c06      	ldr	r4, [pc, #24]	; (80021e4 <_strtol_r+0x1c>)
 80021cc:	4d06      	ldr	r5, [pc, #24]	; (80021e8 <_strtol_r+0x20>)
 80021ce:	6824      	ldr	r4, [r4, #0]
 80021d0:	6a24      	ldr	r4, [r4, #32]
 80021d2:	2c00      	cmp	r4, #0
 80021d4:	bf08      	it	eq
 80021d6:	462c      	moveq	r4, r5
 80021d8:	9400      	str	r4, [sp, #0]
 80021da:	f7ff ff75 	bl	80020c8 <_strtol_l.isra.0>
 80021de:	b003      	add	sp, #12
 80021e0:	bd30      	pop	{r4, r5, pc}
 80021e2:	bf00      	nop
 80021e4:	20000014 	.word	0x20000014
 80021e8:	20000078 	.word	0x20000078

080021ec <_strtoul_l.isra.0>:
 80021ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021f0:	4680      	mov	r8, r0
 80021f2:	4689      	mov	r9, r1
 80021f4:	4692      	mov	sl, r2
 80021f6:	461e      	mov	r6, r3
 80021f8:	460f      	mov	r7, r1
 80021fa:	463d      	mov	r5, r7
 80021fc:	9808      	ldr	r0, [sp, #32]
 80021fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002202:	f000 f8be 	bl	8002382 <__locale_ctype_ptr_l>
 8002206:	4420      	add	r0, r4
 8002208:	7843      	ldrb	r3, [r0, #1]
 800220a:	f013 0308 	ands.w	r3, r3, #8
 800220e:	d10a      	bne.n	8002226 <_strtoul_l.isra.0+0x3a>
 8002210:	2c2d      	cmp	r4, #45	; 0x2d
 8002212:	d10a      	bne.n	800222a <_strtoul_l.isra.0+0x3e>
 8002214:	782c      	ldrb	r4, [r5, #0]
 8002216:	2301      	movs	r3, #1
 8002218:	1cbd      	adds	r5, r7, #2
 800221a:	b15e      	cbz	r6, 8002234 <_strtoul_l.isra.0+0x48>
 800221c:	2e10      	cmp	r6, #16
 800221e:	d113      	bne.n	8002248 <_strtoul_l.isra.0+0x5c>
 8002220:	2c30      	cmp	r4, #48	; 0x30
 8002222:	d009      	beq.n	8002238 <_strtoul_l.isra.0+0x4c>
 8002224:	e010      	b.n	8002248 <_strtoul_l.isra.0+0x5c>
 8002226:	462f      	mov	r7, r5
 8002228:	e7e7      	b.n	80021fa <_strtoul_l.isra.0+0xe>
 800222a:	2c2b      	cmp	r4, #43	; 0x2b
 800222c:	bf04      	itt	eq
 800222e:	782c      	ldrbeq	r4, [r5, #0]
 8002230:	1cbd      	addeq	r5, r7, #2
 8002232:	e7f2      	b.n	800221a <_strtoul_l.isra.0+0x2e>
 8002234:	2c30      	cmp	r4, #48	; 0x30
 8002236:	d125      	bne.n	8002284 <_strtoul_l.isra.0+0x98>
 8002238:	782a      	ldrb	r2, [r5, #0]
 800223a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800223e:	2a58      	cmp	r2, #88	; 0x58
 8002240:	d14a      	bne.n	80022d8 <_strtoul_l.isra.0+0xec>
 8002242:	786c      	ldrb	r4, [r5, #1]
 8002244:	2610      	movs	r6, #16
 8002246:	3502      	adds	r5, #2
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	2700      	movs	r7, #0
 800224e:	fbb1 f1f6 	udiv	r1, r1, r6
 8002252:	fb06 fe01 	mul.w	lr, r6, r1
 8002256:	ea6f 0e0e 	mvn.w	lr, lr
 800225a:	4638      	mov	r0, r7
 800225c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8002260:	2a09      	cmp	r2, #9
 8002262:	d811      	bhi.n	8002288 <_strtoul_l.isra.0+0x9c>
 8002264:	4614      	mov	r4, r2
 8002266:	42a6      	cmp	r6, r4
 8002268:	dd1d      	ble.n	80022a6 <_strtoul_l.isra.0+0xba>
 800226a:	2f00      	cmp	r7, #0
 800226c:	db18      	blt.n	80022a0 <_strtoul_l.isra.0+0xb4>
 800226e:	4281      	cmp	r1, r0
 8002270:	d316      	bcc.n	80022a0 <_strtoul_l.isra.0+0xb4>
 8002272:	d101      	bne.n	8002278 <_strtoul_l.isra.0+0x8c>
 8002274:	45a6      	cmp	lr, r4
 8002276:	db13      	blt.n	80022a0 <_strtoul_l.isra.0+0xb4>
 8002278:	fb00 4006 	mla	r0, r0, r6, r4
 800227c:	2701      	movs	r7, #1
 800227e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002282:	e7eb      	b.n	800225c <_strtoul_l.isra.0+0x70>
 8002284:	260a      	movs	r6, #10
 8002286:	e7df      	b.n	8002248 <_strtoul_l.isra.0+0x5c>
 8002288:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800228c:	2a19      	cmp	r2, #25
 800228e:	d801      	bhi.n	8002294 <_strtoul_l.isra.0+0xa8>
 8002290:	3c37      	subs	r4, #55	; 0x37
 8002292:	e7e8      	b.n	8002266 <_strtoul_l.isra.0+0x7a>
 8002294:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8002298:	2a19      	cmp	r2, #25
 800229a:	d804      	bhi.n	80022a6 <_strtoul_l.isra.0+0xba>
 800229c:	3c57      	subs	r4, #87	; 0x57
 800229e:	e7e2      	b.n	8002266 <_strtoul_l.isra.0+0x7a>
 80022a0:	f04f 37ff 	mov.w	r7, #4294967295
 80022a4:	e7eb      	b.n	800227e <_strtoul_l.isra.0+0x92>
 80022a6:	2f00      	cmp	r7, #0
 80022a8:	da09      	bge.n	80022be <_strtoul_l.isra.0+0xd2>
 80022aa:	2322      	movs	r3, #34	; 0x22
 80022ac:	f8c8 3000 	str.w	r3, [r8]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f1ba 0f00 	cmp.w	sl, #0
 80022b8:	d107      	bne.n	80022ca <_strtoul_l.isra.0+0xde>
 80022ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022be:	b103      	cbz	r3, 80022c2 <_strtoul_l.isra.0+0xd6>
 80022c0:	4240      	negs	r0, r0
 80022c2:	f1ba 0f00 	cmp.w	sl, #0
 80022c6:	d00c      	beq.n	80022e2 <_strtoul_l.isra.0+0xf6>
 80022c8:	b127      	cbz	r7, 80022d4 <_strtoul_l.isra.0+0xe8>
 80022ca:	3d01      	subs	r5, #1
 80022cc:	f8ca 5000 	str.w	r5, [sl]
 80022d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022d4:	464d      	mov	r5, r9
 80022d6:	e7f9      	b.n	80022cc <_strtoul_l.isra.0+0xe0>
 80022d8:	2430      	movs	r4, #48	; 0x30
 80022da:	2e00      	cmp	r6, #0
 80022dc:	d1b4      	bne.n	8002248 <_strtoul_l.isra.0+0x5c>
 80022de:	2608      	movs	r6, #8
 80022e0:	e7b2      	b.n	8002248 <_strtoul_l.isra.0+0x5c>
 80022e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080022e8 <_strtoul_r>:
 80022e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022ea:	4c06      	ldr	r4, [pc, #24]	; (8002304 <_strtoul_r+0x1c>)
 80022ec:	4d06      	ldr	r5, [pc, #24]	; (8002308 <_strtoul_r+0x20>)
 80022ee:	6824      	ldr	r4, [r4, #0]
 80022f0:	6a24      	ldr	r4, [r4, #32]
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	bf08      	it	eq
 80022f6:	462c      	moveq	r4, r5
 80022f8:	9400      	str	r4, [sp, #0]
 80022fa:	f7ff ff77 	bl	80021ec <_strtoul_l.isra.0>
 80022fe:	b003      	add	sp, #12
 8002300:	bd30      	pop	{r4, r5, pc}
 8002302:	bf00      	nop
 8002304:	20000014 	.word	0x20000014
 8002308:	20000078 	.word	0x20000078

0800230c <__submore>:
 800230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002310:	460c      	mov	r4, r1
 8002312:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002318:	4299      	cmp	r1, r3
 800231a:	d11e      	bne.n	800235a <__submore+0x4e>
 800231c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002320:	f000 f8ac 	bl	800247c <_malloc_r>
 8002324:	b918      	cbnz	r0, 800232e <__submore+0x22>
 8002326:	f04f 30ff 	mov.w	r0, #4294967295
 800232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002332:	63a3      	str	r3, [r4, #56]	; 0x38
 8002334:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002338:	6360      	str	r0, [r4, #52]	; 0x34
 800233a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800233e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002342:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8002346:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800234a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800234e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002352:	6020      	str	r0, [r4, #0]
 8002354:	2000      	movs	r0, #0
 8002356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800235a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800235c:	0077      	lsls	r7, r6, #1
 800235e:	463a      	mov	r2, r7
 8002360:	f000 f8ea 	bl	8002538 <_realloc_r>
 8002364:	4605      	mov	r5, r0
 8002366:	2800      	cmp	r0, #0
 8002368:	d0dd      	beq.n	8002326 <__submore+0x1a>
 800236a:	eb00 0806 	add.w	r8, r0, r6
 800236e:	4601      	mov	r1, r0
 8002370:	4632      	mov	r2, r6
 8002372:	4640      	mov	r0, r8
 8002374:	f000 f828 	bl	80023c8 <memcpy>
 8002378:	f8c4 8000 	str.w	r8, [r4]
 800237c:	6365      	str	r5, [r4, #52]	; 0x34
 800237e:	63a7      	str	r7, [r4, #56]	; 0x38
 8002380:	e7e8      	b.n	8002354 <__submore+0x48>

08002382 <__locale_ctype_ptr_l>:
 8002382:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002386:	4770      	bx	lr

08002388 <__locale_ctype_ptr>:
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__locale_ctype_ptr+0x14>)
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <__locale_ctype_ptr+0x18>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf08      	it	eq
 8002394:	4613      	moveq	r3, r2
 8002396:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800239a:	4770      	bx	lr
 800239c:	20000014 	.word	0x20000014
 80023a0:	20000078 	.word	0x20000078

080023a4 <__ascii_mbtowc>:
 80023a4:	b082      	sub	sp, #8
 80023a6:	b901      	cbnz	r1, 80023aa <__ascii_mbtowc+0x6>
 80023a8:	a901      	add	r1, sp, #4
 80023aa:	b142      	cbz	r2, 80023be <__ascii_mbtowc+0x1a>
 80023ac:	b14b      	cbz	r3, 80023c2 <__ascii_mbtowc+0x1e>
 80023ae:	7813      	ldrb	r3, [r2, #0]
 80023b0:	600b      	str	r3, [r1, #0]
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	1c10      	adds	r0, r2, #0
 80023b6:	bf18      	it	ne
 80023b8:	2001      	movne	r0, #1
 80023ba:	b002      	add	sp, #8
 80023bc:	4770      	bx	lr
 80023be:	4610      	mov	r0, r2
 80023c0:	e7fb      	b.n	80023ba <__ascii_mbtowc+0x16>
 80023c2:	f06f 0001 	mvn.w	r0, #1
 80023c6:	e7f8      	b.n	80023ba <__ascii_mbtowc+0x16>

080023c8 <memcpy>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	1e43      	subs	r3, r0, #1
 80023cc:	440a      	add	r2, r1
 80023ce:	4291      	cmp	r1, r2
 80023d0:	d100      	bne.n	80023d4 <memcpy+0xc>
 80023d2:	bd10      	pop	{r4, pc}
 80023d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023dc:	e7f7      	b.n	80023ce <memcpy+0x6>
	...

080023e0 <_free_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4605      	mov	r5, r0
 80023e4:	2900      	cmp	r1, #0
 80023e6:	d045      	beq.n	8002474 <_free_r+0x94>
 80023e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023ec:	1f0c      	subs	r4, r1, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	18e4      	addlt	r4, r4, r3
 80023f4:	f000 f8e3 	bl	80025be <__malloc_lock>
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <_free_r+0x98>)
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	4610      	mov	r0, r2
 80023fe:	b933      	cbnz	r3, 800240e <_free_r+0x2e>
 8002400:	6063      	str	r3, [r4, #4]
 8002402:	6014      	str	r4, [r2, #0]
 8002404:	4628      	mov	r0, r5
 8002406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800240a:	f000 b8d9 	b.w	80025c0 <__malloc_unlock>
 800240e:	42a3      	cmp	r3, r4
 8002410:	d90c      	bls.n	800242c <_free_r+0x4c>
 8002412:	6821      	ldr	r1, [r4, #0]
 8002414:	1862      	adds	r2, r4, r1
 8002416:	4293      	cmp	r3, r2
 8002418:	bf04      	itt	eq
 800241a:	681a      	ldreq	r2, [r3, #0]
 800241c:	685b      	ldreq	r3, [r3, #4]
 800241e:	6063      	str	r3, [r4, #4]
 8002420:	bf04      	itt	eq
 8002422:	1852      	addeq	r2, r2, r1
 8002424:	6022      	streq	r2, [r4, #0]
 8002426:	6004      	str	r4, [r0, #0]
 8002428:	e7ec      	b.n	8002404 <_free_r+0x24>
 800242a:	4613      	mov	r3, r2
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	b10a      	cbz	r2, 8002434 <_free_r+0x54>
 8002430:	42a2      	cmp	r2, r4
 8002432:	d9fa      	bls.n	800242a <_free_r+0x4a>
 8002434:	6819      	ldr	r1, [r3, #0]
 8002436:	1858      	adds	r0, r3, r1
 8002438:	42a0      	cmp	r0, r4
 800243a:	d10b      	bne.n	8002454 <_free_r+0x74>
 800243c:	6820      	ldr	r0, [r4, #0]
 800243e:	4401      	add	r1, r0
 8002440:	1858      	adds	r0, r3, r1
 8002442:	4282      	cmp	r2, r0
 8002444:	6019      	str	r1, [r3, #0]
 8002446:	d1dd      	bne.n	8002404 <_free_r+0x24>
 8002448:	6810      	ldr	r0, [r2, #0]
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	4401      	add	r1, r0
 8002450:	6019      	str	r1, [r3, #0]
 8002452:	e7d7      	b.n	8002404 <_free_r+0x24>
 8002454:	d902      	bls.n	800245c <_free_r+0x7c>
 8002456:	230c      	movs	r3, #12
 8002458:	602b      	str	r3, [r5, #0]
 800245a:	e7d3      	b.n	8002404 <_free_r+0x24>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	1821      	adds	r1, r4, r0
 8002460:	428a      	cmp	r2, r1
 8002462:	bf04      	itt	eq
 8002464:	6811      	ldreq	r1, [r2, #0]
 8002466:	6852      	ldreq	r2, [r2, #4]
 8002468:	6062      	str	r2, [r4, #4]
 800246a:	bf04      	itt	eq
 800246c:	1809      	addeq	r1, r1, r0
 800246e:	6021      	streq	r1, [r4, #0]
 8002470:	605c      	str	r4, [r3, #4]
 8002472:	e7c7      	b.n	8002404 <_free_r+0x24>
 8002474:	bd38      	pop	{r3, r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	20000208 	.word	0x20000208

0800247c <_malloc_r>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	1ccd      	adds	r5, r1, #3
 8002480:	f025 0503 	bic.w	r5, r5, #3
 8002484:	3508      	adds	r5, #8
 8002486:	2d0c      	cmp	r5, #12
 8002488:	bf38      	it	cc
 800248a:	250c      	movcc	r5, #12
 800248c:	2d00      	cmp	r5, #0
 800248e:	4606      	mov	r6, r0
 8002490:	db01      	blt.n	8002496 <_malloc_r+0x1a>
 8002492:	42a9      	cmp	r1, r5
 8002494:	d903      	bls.n	800249e <_malloc_r+0x22>
 8002496:	230c      	movs	r3, #12
 8002498:	6033      	str	r3, [r6, #0]
 800249a:	2000      	movs	r0, #0
 800249c:	bd70      	pop	{r4, r5, r6, pc}
 800249e:	f000 f88e 	bl	80025be <__malloc_lock>
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <_malloc_r+0xb4>)
 80024a4:	6814      	ldr	r4, [r2, #0]
 80024a6:	4621      	mov	r1, r4
 80024a8:	b991      	cbnz	r1, 80024d0 <_malloc_r+0x54>
 80024aa:	4c22      	ldr	r4, [pc, #136]	; (8002534 <_malloc_r+0xb8>)
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	b91b      	cbnz	r3, 80024b8 <_malloc_r+0x3c>
 80024b0:	4630      	mov	r0, r6
 80024b2:	f000 f867 	bl	8002584 <_sbrk_r>
 80024b6:	6020      	str	r0, [r4, #0]
 80024b8:	4629      	mov	r1, r5
 80024ba:	4630      	mov	r0, r6
 80024bc:	f000 f862 	bl	8002584 <_sbrk_r>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d126      	bne.n	8002512 <_malloc_r+0x96>
 80024c4:	230c      	movs	r3, #12
 80024c6:	6033      	str	r3, [r6, #0]
 80024c8:	4630      	mov	r0, r6
 80024ca:	f000 f879 	bl	80025c0 <__malloc_unlock>
 80024ce:	e7e4      	b.n	800249a <_malloc_r+0x1e>
 80024d0:	680b      	ldr	r3, [r1, #0]
 80024d2:	1b5b      	subs	r3, r3, r5
 80024d4:	d41a      	bmi.n	800250c <_malloc_r+0x90>
 80024d6:	2b0b      	cmp	r3, #11
 80024d8:	d90f      	bls.n	80024fa <_malloc_r+0x7e>
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	50cd      	str	r5, [r1, r3]
 80024de:	18cc      	adds	r4, r1, r3
 80024e0:	4630      	mov	r0, r6
 80024e2:	f000 f86d 	bl	80025c0 <__malloc_unlock>
 80024e6:	f104 000b 	add.w	r0, r4, #11
 80024ea:	1d23      	adds	r3, r4, #4
 80024ec:	f020 0007 	bic.w	r0, r0, #7
 80024f0:	1ac3      	subs	r3, r0, r3
 80024f2:	d01b      	beq.n	800252c <_malloc_r+0xb0>
 80024f4:	425a      	negs	r2, r3
 80024f6:	50e2      	str	r2, [r4, r3]
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	428c      	cmp	r4, r1
 80024fc:	bf0d      	iteet	eq
 80024fe:	6863      	ldreq	r3, [r4, #4]
 8002500:	684b      	ldrne	r3, [r1, #4]
 8002502:	6063      	strne	r3, [r4, #4]
 8002504:	6013      	streq	r3, [r2, #0]
 8002506:	bf18      	it	ne
 8002508:	460c      	movne	r4, r1
 800250a:	e7e9      	b.n	80024e0 <_malloc_r+0x64>
 800250c:	460c      	mov	r4, r1
 800250e:	6849      	ldr	r1, [r1, #4]
 8002510:	e7ca      	b.n	80024a8 <_malloc_r+0x2c>
 8002512:	1cc4      	adds	r4, r0, #3
 8002514:	f024 0403 	bic.w	r4, r4, #3
 8002518:	42a0      	cmp	r0, r4
 800251a:	d005      	beq.n	8002528 <_malloc_r+0xac>
 800251c:	1a21      	subs	r1, r4, r0
 800251e:	4630      	mov	r0, r6
 8002520:	f000 f830 	bl	8002584 <_sbrk_r>
 8002524:	3001      	adds	r0, #1
 8002526:	d0cd      	beq.n	80024c4 <_malloc_r+0x48>
 8002528:	6025      	str	r5, [r4, #0]
 800252a:	e7d9      	b.n	80024e0 <_malloc_r+0x64>
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	bf00      	nop
 8002530:	20000208 	.word	0x20000208
 8002534:	2000020c 	.word	0x2000020c

08002538 <_realloc_r>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	4607      	mov	r7, r0
 800253c:	4614      	mov	r4, r2
 800253e:	460e      	mov	r6, r1
 8002540:	b921      	cbnz	r1, 800254c <_realloc_r+0x14>
 8002542:	4611      	mov	r1, r2
 8002544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002548:	f7ff bf98 	b.w	800247c <_malloc_r>
 800254c:	b922      	cbnz	r2, 8002558 <_realloc_r+0x20>
 800254e:	f7ff ff47 	bl	80023e0 <_free_r>
 8002552:	4625      	mov	r5, r4
 8002554:	4628      	mov	r0, r5
 8002556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002558:	f000 f833 	bl	80025c2 <_malloc_usable_size_r>
 800255c:	4284      	cmp	r4, r0
 800255e:	d90f      	bls.n	8002580 <_realloc_r+0x48>
 8002560:	4621      	mov	r1, r4
 8002562:	4638      	mov	r0, r7
 8002564:	f7ff ff8a 	bl	800247c <_malloc_r>
 8002568:	4605      	mov	r5, r0
 800256a:	2800      	cmp	r0, #0
 800256c:	d0f2      	beq.n	8002554 <_realloc_r+0x1c>
 800256e:	4631      	mov	r1, r6
 8002570:	4622      	mov	r2, r4
 8002572:	f7ff ff29 	bl	80023c8 <memcpy>
 8002576:	4631      	mov	r1, r6
 8002578:	4638      	mov	r0, r7
 800257a:	f7ff ff31 	bl	80023e0 <_free_r>
 800257e:	e7e9      	b.n	8002554 <_realloc_r+0x1c>
 8002580:	4635      	mov	r5, r6
 8002582:	e7e7      	b.n	8002554 <_realloc_r+0x1c>

08002584 <_sbrk_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4c06      	ldr	r4, [pc, #24]	; (80025a0 <_sbrk_r+0x1c>)
 8002588:	2300      	movs	r3, #0
 800258a:	4605      	mov	r5, r0
 800258c:	4608      	mov	r0, r1
 800258e:	6023      	str	r3, [r4, #0]
 8002590:	f7ff f9b4 	bl	80018fc <_sbrk>
 8002594:	1c43      	adds	r3, r0, #1
 8002596:	d102      	bne.n	800259e <_sbrk_r+0x1a>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	b103      	cbz	r3, 800259e <_sbrk_r+0x1a>
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	bd38      	pop	{r3, r4, r5, pc}
 80025a0:	200002a0 	.word	0x200002a0

080025a4 <__ascii_wctomb>:
 80025a4:	b149      	cbz	r1, 80025ba <__ascii_wctomb+0x16>
 80025a6:	2aff      	cmp	r2, #255	; 0xff
 80025a8:	bf85      	ittet	hi
 80025aa:	238a      	movhi	r3, #138	; 0x8a
 80025ac:	6003      	strhi	r3, [r0, #0]
 80025ae:	700a      	strbls	r2, [r1, #0]
 80025b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80025b4:	bf98      	it	ls
 80025b6:	2001      	movls	r0, #1
 80025b8:	4770      	bx	lr
 80025ba:	4608      	mov	r0, r1
 80025bc:	4770      	bx	lr

080025be <__malloc_lock>:
 80025be:	4770      	bx	lr

080025c0 <__malloc_unlock>:
 80025c0:	4770      	bx	lr

080025c2 <_malloc_usable_size_r>:
 80025c2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80025c6:	2800      	cmp	r0, #0
 80025c8:	f1a0 0004 	sub.w	r0, r0, #4
 80025cc:	bfbc      	itt	lt
 80025ce:	580b      	ldrlt	r3, [r1, r0]
 80025d0:	18c0      	addlt	r0, r0, r3
 80025d2:	4770      	bx	lr

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	bf00      	nop
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
